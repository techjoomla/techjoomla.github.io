{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Techjoomla Docs \u00b6 Find developer friendly documentation of our Open Sourced Joomla extensions. Docs Index \u00b6 Project Description Hierarchy Management Allows setting up general or context specific hierarchical relations between users Joomla Rest API This is a quick and easy way to add REST APIs to Joomla Terms & Conditions Manager This is used to force users to accept the T&C before they can start using the site, or a part of the site. TJFields TJ-Fields is a horizontal extension used to extend the existing forms (Adding custom fields) of any component TJReports Easy to extend reports manager TJQueue Queue for Joomla extensions TJUCM Universal Content Manager (UCM) is an application built on top of TJ-Fields. TJVendors Vendor profile and payouts manager for E-commerce extensions","title":"Home"},{"location":"#welcome-to-techjoomla-docs","text":"Find developer friendly documentation of our Open Sourced Joomla extensions.","title":"Welcome to Techjoomla Docs"},{"location":"#docs-index","text":"Project Description Hierarchy Management Allows setting up general or context specific hierarchical relations between users Joomla Rest API This is a quick and easy way to add REST APIs to Joomla Terms & Conditions Manager This is used to force users to accept the T&C before they can start using the site, or a part of the site. TJFields TJ-Fields is a horizontal extension used to extend the existing forms (Adding custom fields) of any component TJReports Easy to extend reports manager TJQueue Queue for Joomla extensions TJUCM Universal Content Manager (UCM) is an application built on top of TJ-Fields. TJVendors Vendor profile and payouts manager for E-commerce extensions","title":"Docs Index"},{"location":"hierarchy-management/hierarchy-manager-introduction/","text":"Hierarchy Management is an horizontal (infrastructure) extension by Techjoomla that allows setting up general or context specific hierarchical relations between users. This can be used by other extensions to allow special access control, generate reports and so on.","title":"Introduction"},{"location":"joomla-rest-api/com-api-impersonation/","text":"Overview \u00b6 Using the impersonation feature it is possible for a Super Admin user to impersonate another user. To use this feature, the token being used for an API call should be belonging to a Super Admin user (specifically, any user having the core.admin permission). To impersonate another user, pass the header X-Impersonate . The value of the header is the user id of the user to impersonate eg: X-Impersonate : 42 . It is also possible to use the username or email of the user eg: X-Impersonate : email:user@email.com or X-Impersonate : username:ashwin . Security Note When using this feature, we recommend the below steps to improve the security of your setup Create a new token to be used only for impersonation instead of using an existing token. Absolutely avoid using this token for client side requests. Use it only in server side communication. More details of how this works \u00b6 Normally, the com_api framework sets the JUser object for any API call based on the token passed in the Authorization header. Plugins can then access the user object making the API call via $this->plugin->get('user') . This feature adds support for a new X-Impersonate header which allows the API caller to set a different user than the one making the API call. The Impersonate header can accept either the id, username or email of the user to impersonate. The Impersonate header cannot be used by all users, only by Super Users. Example \u00b6 Consider the example below ID Name Email API Token Level 20 Rahul rahul@mail.com rrrrrr Super User 21 Jaya jaya@mail.com jjjjjj Registered 22 Kevin kevin@mail.com kkkkkkk Registered Case 1 GET /jgive/campaign/619 \"Authorization\": \"Bearer rrrrrr\" \"X-Impersonate\": \"21\" curl --location --request GET 'http://{{host}}/index.php?option=com_api&app=jgive&resource=campaign&id=619&format=raw' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'Authorization: Bearer rrrrrr' --header 'X-Impersonate: 21' In this case the user object available to the campaign resource will be that of userid 21. Case 2 GET /jgive/campaign/619 \"Authorization\": \"Bearer jjjjjj\" \"X-Impersonate\": \"22\" curl --location --request GET 'http://{{host}}/index.php?option=com_api&app=jgive&resource=campaign&id=619&format=raw' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'Authorization: Bearer jjjjjj' --header 'X-Impersonate: 22' This API call will return a 403 error since the user with token jjjjjj is not allowed to use impersonation. Case 3 GET /jgive/campaign/619 \"Authorization\": \"Bearer rrrrrr\" \"X-Impersonate\": \"email:kevin@mail.com\" curl --location --request GET 'http://{{host}}/index.php?option=com_api&app=jgive&resource=campaign&id=619&format=raw' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'Authorization: Bearer rrrrrr' --header 'X-Impersonate: email:kevin@mail.com' In this case the user object available to the campaign resource will be that of userid 22 i.e. the user with the email kevin@mail.com Case 4 GET /jgive/campaign/619 \"Authorization\": \"Bearer jjjjjj\" curl --location --request GET 'http://{{host}}/index.php?option=com_api&app=jgive&resource=campaign&id=619&format=raw' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'Authorization: Bearer jjjjjj' This is how com_api works as of today, the campaign resource will receive the user object for userid 21 Info Feature available since v2.4.0","title":"Impersonating another user"},{"location":"joomla-rest-api/com-api-impersonation/#overview","text":"Using the impersonation feature it is possible for a Super Admin user to impersonate another user. To use this feature, the token being used for an API call should be belonging to a Super Admin user (specifically, any user having the core.admin permission). To impersonate another user, pass the header X-Impersonate . The value of the header is the user id of the user to impersonate eg: X-Impersonate : 42 . It is also possible to use the username or email of the user eg: X-Impersonate : email:user@email.com or X-Impersonate : username:ashwin . Security Note When using this feature, we recommend the below steps to improve the security of your setup Create a new token to be used only for impersonation instead of using an existing token. Absolutely avoid using this token for client side requests. Use it only in server side communication.","title":"Overview"},{"location":"joomla-rest-api/com-api-impersonation/#more-details-of-how-this-works","text":"Normally, the com_api framework sets the JUser object for any API call based on the token passed in the Authorization header. Plugins can then access the user object making the API call via $this->plugin->get('user') . This feature adds support for a new X-Impersonate header which allows the API caller to set a different user than the one making the API call. The Impersonate header can accept either the id, username or email of the user to impersonate. The Impersonate header cannot be used by all users, only by Super Users.","title":"More details of how this works"},{"location":"joomla-rest-api/com-api-impersonation/#example","text":"Consider the example below ID Name Email API Token Level 20 Rahul rahul@mail.com rrrrrr Super User 21 Jaya jaya@mail.com jjjjjj Registered 22 Kevin kevin@mail.com kkkkkkk Registered Case 1 GET /jgive/campaign/619 \"Authorization\": \"Bearer rrrrrr\" \"X-Impersonate\": \"21\" curl --location --request GET 'http://{{host}}/index.php?option=com_api&app=jgive&resource=campaign&id=619&format=raw' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'Authorization: Bearer rrrrrr' --header 'X-Impersonate: 21' In this case the user object available to the campaign resource will be that of userid 21. Case 2 GET /jgive/campaign/619 \"Authorization\": \"Bearer jjjjjj\" \"X-Impersonate\": \"22\" curl --location --request GET 'http://{{host}}/index.php?option=com_api&app=jgive&resource=campaign&id=619&format=raw' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'Authorization: Bearer jjjjjj' --header 'X-Impersonate: 22' This API call will return a 403 error since the user with token jjjjjj is not allowed to use impersonation. Case 3 GET /jgive/campaign/619 \"Authorization\": \"Bearer rrrrrr\" \"X-Impersonate\": \"email:kevin@mail.com\" curl --location --request GET 'http://{{host}}/index.php?option=com_api&app=jgive&resource=campaign&id=619&format=raw' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'Authorization: Bearer rrrrrr' --header 'X-Impersonate: email:kevin@mail.com' In this case the user object available to the campaign resource will be that of userid 22 i.e. the user with the email kevin@mail.com Case 4 GET /jgive/campaign/619 \"Authorization\": \"Bearer jjjjjj\" curl --location --request GET 'http://{{host}}/index.php?option=com_api&app=jgive&resource=campaign&id=619&format=raw' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'Authorization: Bearer jjjjjj' This is how com_api works as of today, the campaign resource will receive the user object for userid 21 Info Feature available since v2.4.0","title":"Example"},{"location":"joomla-rest-api/com-api-introduction/","text":"What is com_api ? \u00b6 com_api is a quick and easy way to add REST APIs to Joomla. Extendible via plugins, you can easily add support for more Joomla extensions. To get started, download the component and install the API plugins you need. Enable the plugins and you are ready to fetch your content via APIs. To add additional resources to the API, plugins need to be created. Each plugin can provide multiple API resources. Plugins are a convenient way to group several resources. Eg: A single plugin could be created for an 'e-commerce' component with separate resources for products, cart, checkout, orders etc. com_api terminology (plugin terms) \u00b6 app \u00b6 An app is essentially a Joomla plugin. However, the plugin itself does nothing more than load the resources it contains. So the app is mainly used to package the API plugin and to enable adding any API specific parameters. Each app will have one or more resources. resource \u00b6 Resources are files that have code to accept input and set the API output. You will usually have multiple resources in an app. A common use case is for an extension like Easysocial or Jomsocial to have a single app. The app contains resources for various objects like groups, events, photos, newsfeed etc. The resource will contain the methods get() post() delete() to perform CRUD operations on that type of object. key / token \u00b6 The key is used to access authenticated resources. The admin section allows you to create keys. It's also possible to use the /api/user/login API to login using username and password and get a token in response.","title":"Introduction"},{"location":"joomla-rest-api/com-api-introduction/#what-is-com_api","text":"com_api is a quick and easy way to add REST APIs to Joomla. Extendible via plugins, you can easily add support for more Joomla extensions. To get started, download the component and install the API plugins you need. Enable the plugins and you are ready to fetch your content via APIs. To add additional resources to the API, plugins need to be created. Each plugin can provide multiple API resources. Plugins are a convenient way to group several resources. Eg: A single plugin could be created for an 'e-commerce' component with separate resources for products, cart, checkout, orders etc.","title":"What is com_api?"},{"location":"joomla-rest-api/com-api-introduction/#com_api-terminology-plugin-terms","text":"","title":"com_api terminology (plugin terms)"},{"location":"joomla-rest-api/com-api-introduction/#app","text":"An app is essentially a Joomla plugin. However, the plugin itself does nothing more than load the resources it contains. So the app is mainly used to package the API plugin and to enable adding any API specific parameters. Each app will have one or more resources.","title":"app"},{"location":"joomla-rest-api/com-api-introduction/#resource","text":"Resources are files that have code to accept input and set the API output. You will usually have multiple resources in an app. A common use case is for an extension like Easysocial or Jomsocial to have a single app. The app contains resources for various objects like groups, events, photos, newsfeed etc. The resource will contain the methods get() post() delete() to perform CRUD operations on that type of object.","title":"resource"},{"location":"joomla-rest-api/com-api-introduction/#key-token","text":"The key is used to access authenticated resources. The admin section allows you to create keys. It's also possible to use the /api/user/login API to login using username and password and get a token in response.","title":"key / token"},{"location":"joomla-rest-api/com-api-making-api-calls/","text":"How to call API resources? \u00b6 To make an API call, We need to set: API URL, authentication headers, output format 1. Set API URLs \u00b6 Non-SEF URLs \u00b6 If you do not have SEF URLs enabled, use the endpoint URL as index.php?option=com_api&app={app}&resource={resource}&format=raw Example for users plugin could be: index.php?option=com_api&app=users&resource=user&id=619&format=raw SEF URLs \u00b6 SEF URL to access any route is of the format /api/{plugin}/{resource} Example for users plugin could be: /api/users/user/619 Info To enable SEF URLs for endpoints, make sure you have created a Joomla menu of the type API > API Endpoint. If you create the menu using any other alias than api make sure you use the apppropriate slug in the endpoint. Tip If your resource expects an id parameter in the URL, you can use /api/{plugin}/{resource}/{id} as the API url. Other querystring need to be sent as is. 2. Set Authentication header \u00b6 While it is possible for an app to make an entire resource or a specific HTTP method in a resource public, other non-public resources will need API token for authentication. The token needs to be passed via the Authorization header using the Bearer scheme eg: Authorization: Bearer <token> . Info Previous versions also allowed passing the token as a querystring variable with the name key . The querystring approach will be deprecated in the future version. Note Sometimes Apache does not pass on the Authorization header, in such cases send then token using the X-Authorization header i.e. X-Authorization: Bearer {token} 3. Set Output Format \u00b6 The default output format is JSON. However it's also possible to get XML output by setting the Accept: application/xml header. Example url call \u00b6 An example curl call may look like this: curl --location --request GET 'http://{{host}}/index.php?option=com_api&app=users&resource=user&id=619&format=raw' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'Authorization: Bearer c8b16517a0a21c446f1ee9980944cd7e' Overriding Output \u00b6 If you wish to modify the 'envelope' of the response: you can copy the file components/com_api/libraries/response/jsonresponse.php paste into templates/{your template}/json/api.php and modify the structure of the output. Info A similar override is possible by creating a xml.php as well.","title":"Making calls to API resources"},{"location":"joomla-rest-api/com-api-making-api-calls/#how-to-call-api-resources","text":"To make an API call, We need to set: API URL, authentication headers, output format","title":"How to call API resources?"},{"location":"joomla-rest-api/com-api-making-api-calls/#1-set-api-urls","text":"","title":"1. Set API URLs"},{"location":"joomla-rest-api/com-api-making-api-calls/#non-sef-urls","text":"If you do not have SEF URLs enabled, use the endpoint URL as index.php?option=com_api&app={app}&resource={resource}&format=raw Example for users plugin could be: index.php?option=com_api&app=users&resource=user&id=619&format=raw","title":"Non-SEF URLs"},{"location":"joomla-rest-api/com-api-making-api-calls/#sef-urls","text":"SEF URL to access any route is of the format /api/{plugin}/{resource} Example for users plugin could be: /api/users/user/619 Info To enable SEF URLs for endpoints, make sure you have created a Joomla menu of the type API > API Endpoint. If you create the menu using any other alias than api make sure you use the apppropriate slug in the endpoint. Tip If your resource expects an id parameter in the URL, you can use /api/{plugin}/{resource}/{id} as the API url. Other querystring need to be sent as is.","title":"SEF URLs"},{"location":"joomla-rest-api/com-api-making-api-calls/#2-set-authentication-header","text":"While it is possible for an app to make an entire resource or a specific HTTP method in a resource public, other non-public resources will need API token for authentication. The token needs to be passed via the Authorization header using the Bearer scheme eg: Authorization: Bearer <token> . Info Previous versions also allowed passing the token as a querystring variable with the name key . The querystring approach will be deprecated in the future version. Note Sometimes Apache does not pass on the Authorization header, in such cases send then token using the X-Authorization header i.e. X-Authorization: Bearer {token}","title":"2. Set Authentication header"},{"location":"joomla-rest-api/com-api-making-api-calls/#3-set-output-format","text":"The default output format is JSON. However it's also possible to get XML output by setting the Accept: application/xml header.","title":"3. Set Output Format"},{"location":"joomla-rest-api/com-api-making-api-calls/#example-url-call","text":"An example curl call may look like this: curl --location --request GET 'http://{{host}}/index.php?option=com_api&app=users&resource=user&id=619&format=raw' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'Authorization: Bearer c8b16517a0a21c446f1ee9980944cd7e'","title":"Example url call"},{"location":"joomla-rest-api/com-api-making-api-calls/#overriding-output","text":"If you wish to modify the 'envelope' of the response: you can copy the file components/com_api/libraries/response/jsonresponse.php paste into templates/{your template}/json/api.php and modify the structure of the output. Info A similar override is possible by creating a xml.php as well.","title":"Overriding Output"},{"location":"joomla-rest-api/com-api-mobile-app-use-case/","text":"Let's consider you are building a mobile app with Joomla as backend for APIs. You can use com_api, plg_api_users, and create your own API plugins as needed. Pre-requisites You have installed latest com_api and its latest user plugin And, you have built a mobile application which interacts with your website Steps for com_api as Rest API provider \u00b6 Steps to get auth token \u00b6 1.1 From the mobile app, when user wants to login for very first time - user will enter username and password in the mobile application login form. 1.2 Your mobile app will catch those credentials, 1.3 and make an API call as below Example: Method POST URL { {host } }/index.php?option=com_api&app=users&resource=login&format=raw Headers Content-Type: application/x-www-form-urlencoded Post Data username: user entered value password: user entered value CURL example curl --location --request POST 'http://{{host}}/index.php?app=users&resource=login&option=com_api&format=raw' \\ --form 'username=example@gmail.com' \\ --form 'password=passwordGoesHere' Response If credentials are correct, you will get a response, which looks like { \"err_msg\" : \"\" , \"err_code\" : \"\" , \"response_id\" : 214 , \"api\" : \"users.login\" , \"version\" : \"\" , \"data\" : { \"auth\" : \"c8b16517a0a21c446f1ee9980944cd7e\" , \"code\" : \"200\" , \"id\" : \"653\" , \"jwt\" : \"eyJ0eXAiOiJKV1QiLCJhreebGciOiJIUzI1NiJ9.eyJpZCI6IjY1MyJ9.rere-ZAhpXYXvCHuZbqqTmtwjUvlv8ZnA2t-PxzI\" } } Steps to use auth token for subsequent API calls \u00b6 2.1 Once you get the response to above, you get an auth key, which you can use for next API calls 2.2 Your mobile app should store the auth key lets say local storage or whatever way you prefer \"auth\": \"c8b16517a0a21c446f1ee9980944cd7e\" 3.0 Now, for subsequent API calls you can pass this auth key in the header and still access APIs without passing username and password. Example: Method GET URL { {host } }/index.php?option=com_api&app=users&resource=user&format=raw&id= 619 Headers Content-Type: application/x-www-form-urlencoded Authorization: Bearer c 8 b 16517 a 0 a 21 c 446 f 1 ee 9980944 cd 7 e CURL example curl --location --request GET 'http://{{host}}/index.php?app=users&resource=login&option=com_api&format=raw' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'Authorization: Bearer c8b16517a0a21c446f1ee9980944cd7e' Response You will get a response, which looks like { \"err_msg\" : \"\" , \"err_code\" : \"\" , \"response_id\" : 218 , \"api\" : \"users.user\" , \"version\" : \"\" , \"data\" : { \"id\" : \"619\" , \"name\" : \"asdasd adasda\" , \"username\" : \"asdadad\" , \"email\" : \"asdsd@asdasd.com\" , \"block\" : \"0\" , \"sendEmail\" : \"1\" , \"registerDate\" : \"2019-05-10 06:54:13\" , \"lastvisitDate\" : \"2019-08-27 12:44:44\" , \"activation\" : \"0\" , \"params\" : \"\" , \"groups\" : { \"8\" : \"8\" }, \"guest\" : 0 } } As described in step 3.0, you can call the APIs you have built from the app and use those. Tip If you set up SEF, and have created menu for com_api (with api as alias), you can use SEF URLs like below instead of the one used in above example {{host}}/api/users/user/619","title":"Mobile App Use Case"},{"location":"joomla-rest-api/com-api-mobile-app-use-case/#steps-for-com_api-as-rest-api-provider","text":"","title":"Steps for com_api as Rest API provider"},{"location":"joomla-rest-api/com-api-mobile-app-use-case/#steps-to-get-auth-token","text":"1.1 From the mobile app, when user wants to login for very first time - user will enter username and password in the mobile application login form. 1.2 Your mobile app will catch those credentials, 1.3 and make an API call as below Example: Method POST URL { {host } }/index.php?option=com_api&app=users&resource=login&format=raw Headers Content-Type: application/x-www-form-urlencoded Post Data username: user entered value password: user entered value CURL example curl --location --request POST 'http://{{host}}/index.php?app=users&resource=login&option=com_api&format=raw' \\ --form 'username=example@gmail.com' \\ --form 'password=passwordGoesHere' Response If credentials are correct, you will get a response, which looks like { \"err_msg\" : \"\" , \"err_code\" : \"\" , \"response_id\" : 214 , \"api\" : \"users.login\" , \"version\" : \"\" , \"data\" : { \"auth\" : \"c8b16517a0a21c446f1ee9980944cd7e\" , \"code\" : \"200\" , \"id\" : \"653\" , \"jwt\" : \"eyJ0eXAiOiJKV1QiLCJhreebGciOiJIUzI1NiJ9.eyJpZCI6IjY1MyJ9.rere-ZAhpXYXvCHuZbqqTmtwjUvlv8ZnA2t-PxzI\" } }","title":"Steps to get auth token"},{"location":"joomla-rest-api/com-api-mobile-app-use-case/#steps-to-use-auth-token-for-subsequent-api-calls","text":"2.1 Once you get the response to above, you get an auth key, which you can use for next API calls 2.2 Your mobile app should store the auth key lets say local storage or whatever way you prefer \"auth\": \"c8b16517a0a21c446f1ee9980944cd7e\" 3.0 Now, for subsequent API calls you can pass this auth key in the header and still access APIs without passing username and password. Example: Method GET URL { {host } }/index.php?option=com_api&app=users&resource=user&format=raw&id= 619 Headers Content-Type: application/x-www-form-urlencoded Authorization: Bearer c 8 b 16517 a 0 a 21 c 446 f 1 ee 9980944 cd 7 e CURL example curl --location --request GET 'http://{{host}}/index.php?app=users&resource=login&option=com_api&format=raw' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'Authorization: Bearer c8b16517a0a21c446f1ee9980944cd7e' Response You will get a response, which looks like { \"err_msg\" : \"\" , \"err_code\" : \"\" , \"response_id\" : 218 , \"api\" : \"users.user\" , \"version\" : \"\" , \"data\" : { \"id\" : \"619\" , \"name\" : \"asdasd adasda\" , \"username\" : \"asdadad\" , \"email\" : \"asdsd@asdasd.com\" , \"block\" : \"0\" , \"sendEmail\" : \"1\" , \"registerDate\" : \"2019-05-10 06:54:13\" , \"lastvisitDate\" : \"2019-08-27 12:44:44\" , \"activation\" : \"0\" , \"params\" : \"\" , \"groups\" : { \"8\" : \"8\" }, \"guest\" : 0 } } As described in step 3.0, you can call the APIs you have built from the app and use those. Tip If you set up SEF, and have created menu for com_api (with api as alias), you can use SEF URLs like below instead of the one used in above example {{host}}/api/users/user/619","title":"Steps to use auth token for subsequent API calls"},{"location":"joomla-rest-api/com-api-plugin-development/","text":"You can add new APIs by creating plugins for your own components. Plugin needs to be of 'api' type. Each plugin can have multiple API resources. Each resource supports the GET, POST and DELETE operations. These are exposed by creating methods of the same name, i.e. get() post() and delete() in each of the resources. If a resouce URL is accessed via HTTP POST, the post() method is called, and similarly for the rest. API plugin file structure \u00b6 users.php (plugin entry file) users.xml (plugin manifest file) users (**Resources* folder having resource file, keep name same as plugin name)* login.php (Resource file) users.php (Resource file) language/en-GB (Resource folder having resource file, keep name same as plugin name) en-GB.plg_api_users.ini (add plugin language constant) en-GB.plg_api_users.sys.ini Note You can add multiple resource in resource folder and use them for different purpose. Usually, each resource will map to an object type for your extension. Create plugin entry file users.php file \u00b6 This is the entry file for the API plugin, the things that re deifned in the file are resource locations, and making certain resources public. Below is the code for the file - <?php // Class structure example class PlgAPIUsers extends ApiPlugin { public function __construct ( & $subject , $config = array ()) { parent :: __construct ( $subject , $config = array ()); // Set resource path ApiResource :: addIncludePath ( dirname ( __FILE__ ) . '/users' ); // Load language files $lang = JFactory :: getLanguage (); $lang -> load ( 'com_users' , JPATH_ADMINISTRATOR , '' , true ); // Set the login resource to be public $this -> setResourceAccess ( 'login' , 'public' , 'post' ); } } Create resource file login.php file \u00b6 Although you can place the resource files anywhere, the recommended approach is to place them within a folder inside your plugin. Below is example code for a resource file. Notice how the methods get() and post() are implemented. The methods may return an array or an object which will be automatically converted to JSON or XML. <?php class UsersApiResourceLogin extends ApiResource { public function get () { $result = new \\stdClass ; $result -> id = 45 ; $result -> name = \"John Doe\" ; $this -> plugin -> setResponse ( $result ); } public function post () { // Add your code here $this -> plugin -> setResponse ( $result ); } } The array or object from the plugin should be set via $this->plugin->setResponse() . Error Handling \u00b6 It is possible to send HTTP errors with the right HTTP codes using the APIError::raiseError() method. Depending on the type of error you can raise different Exceptions that set the appropriate HTTP code. <?php public function post () { // Validation Error sets HTTP 400 ApiError :: raiseError ( 10001 , \"Invalid Email\" , 'APIValidationException' ); // Access Error sets HTTP 403 ApiError :: raiseError ( 11001 , \"Not authorised\" , 'APIUnauthorisedException' ); // Not Found Error sets HTTP 404 ApiError :: raiseError ( 12001 , \"Record not found\" , 'APINotFoundException' ); // General Error sets HTTP 400 ApiError :: raiseError ( 10000 , \"Bad Request\" , 'APIException' ); } You are free to specify your own error code and message. It is also possible to add more Exceptions in the components/com_api/libraries/exceptions folder. When using APIError::raiseError() there is no need to use $this->plugin->setResponse() since com_api handles the response and setting the http code. Note The exception classes extend PHP's Exception class. So you will need to use numeric only codes, since PHP does not support non-numeric Exception codes. Private and public resources \u00b6 Unless specified, all resources are private, which means an API token is needed to access. However, it is possible to make certain resource and methods public by using the setResourceAccess() access method as $this->setResourceAccess('login', 'public', 'post') ; The first parameter is the resource name, second is status (should be public to make it public) and last is HTTP method to make public. Setting a resource public will mean that the API URL for that resource will not need any authentication. Access Control \u00b6 ACL needs to be handled by the respective plugins. com_api makes a $this->user object available in the resource class. This is same as the JFactory::getUser() object for the user to whom the token belongs. It is upto the resource to use the user object and apply the necessary access control and produce authorisation errors. <?php class ExamplesApiResourceExample extends ApiResource { public function get () { // Will dump the object for the user who is making the API call var_dump ( $this -> user ); } } Create .xml file \u00b6 Finally create a manifest XML so that your plugin can be installed. Set group as 'api', add plugin name and other details. <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension version= \"3.0.0\" type= \"plugin\" group= \"api\" method= \"upgrade\" > <name> YourPlugin </name> <version> 1.0 </version> <creationDate> 10/11/2016 </creationDate> <author></author> <description></description> <files> <filename plugin= \"your_plugin_name\" > your_plugin_name.php </filename> <folder> your_plugin_name </folder> </files> <languages folder= \"language\" > <language tag= \"en-GB\" > en-GB/en-GB.plg_api_plugin_name.ini </language> <language tag= \"en-GB\" > en-GB/en-GB.plg_api_plugin_name.sys.ini </language> </languages> </extension> Tips for writing plugins Think of API plugins as a replacement of controllers. Any business logic that you won't put in a controller, leave it out of the plugin too. Load and use your models in the plugin code. It is not recommended to have API specific language files unless absolutely necessary. You will ususally make plugins for an existing component, so load the language files from that component. To create the list and details for an object type, you can either add a condition based on id query parameter in the get() method, or have a separate resource for the list.","title":"Writing your own API Plugin"},{"location":"joomla-rest-api/com-api-plugin-development/#api-plugin-file-structure","text":"users.php (plugin entry file) users.xml (plugin manifest file) users (**Resources* folder having resource file, keep name same as plugin name)* login.php (Resource file) users.php (Resource file) language/en-GB (Resource folder having resource file, keep name same as plugin name) en-GB.plg_api_users.ini (add plugin language constant) en-GB.plg_api_users.sys.ini Note You can add multiple resource in resource folder and use them for different purpose. Usually, each resource will map to an object type for your extension.","title":"API plugin file structure"},{"location":"joomla-rest-api/com-api-plugin-development/#create-plugin-entry-file-usersphp-file","text":"This is the entry file for the API plugin, the things that re deifned in the file are resource locations, and making certain resources public. Below is the code for the file - <?php // Class structure example class PlgAPIUsers extends ApiPlugin { public function __construct ( & $subject , $config = array ()) { parent :: __construct ( $subject , $config = array ()); // Set resource path ApiResource :: addIncludePath ( dirname ( __FILE__ ) . '/users' ); // Load language files $lang = JFactory :: getLanguage (); $lang -> load ( 'com_users' , JPATH_ADMINISTRATOR , '' , true ); // Set the login resource to be public $this -> setResourceAccess ( 'login' , 'public' , 'post' ); } }","title":"Create plugin entry file users.php file"},{"location":"joomla-rest-api/com-api-plugin-development/#create-resource-file-loginphp-file","text":"Although you can place the resource files anywhere, the recommended approach is to place them within a folder inside your plugin. Below is example code for a resource file. Notice how the methods get() and post() are implemented. The methods may return an array or an object which will be automatically converted to JSON or XML. <?php class UsersApiResourceLogin extends ApiResource { public function get () { $result = new \\stdClass ; $result -> id = 45 ; $result -> name = \"John Doe\" ; $this -> plugin -> setResponse ( $result ); } public function post () { // Add your code here $this -> plugin -> setResponse ( $result ); } } The array or object from the plugin should be set via $this->plugin->setResponse() .","title":"Create resource file login.php file"},{"location":"joomla-rest-api/com-api-plugin-development/#error-handling","text":"It is possible to send HTTP errors with the right HTTP codes using the APIError::raiseError() method. Depending on the type of error you can raise different Exceptions that set the appropriate HTTP code. <?php public function post () { // Validation Error sets HTTP 400 ApiError :: raiseError ( 10001 , \"Invalid Email\" , 'APIValidationException' ); // Access Error sets HTTP 403 ApiError :: raiseError ( 11001 , \"Not authorised\" , 'APIUnauthorisedException' ); // Not Found Error sets HTTP 404 ApiError :: raiseError ( 12001 , \"Record not found\" , 'APINotFoundException' ); // General Error sets HTTP 400 ApiError :: raiseError ( 10000 , \"Bad Request\" , 'APIException' ); } You are free to specify your own error code and message. It is also possible to add more Exceptions in the components/com_api/libraries/exceptions folder. When using APIError::raiseError() there is no need to use $this->plugin->setResponse() since com_api handles the response and setting the http code. Note The exception classes extend PHP's Exception class. So you will need to use numeric only codes, since PHP does not support non-numeric Exception codes.","title":"Error Handling"},{"location":"joomla-rest-api/com-api-plugin-development/#private-and-public-resources","text":"Unless specified, all resources are private, which means an API token is needed to access. However, it is possible to make certain resource and methods public by using the setResourceAccess() access method as $this->setResourceAccess('login', 'public', 'post') ; The first parameter is the resource name, second is status (should be public to make it public) and last is HTTP method to make public. Setting a resource public will mean that the API URL for that resource will not need any authentication.","title":"Private and public resources"},{"location":"joomla-rest-api/com-api-plugin-development/#access-control","text":"ACL needs to be handled by the respective plugins. com_api makes a $this->user object available in the resource class. This is same as the JFactory::getUser() object for the user to whom the token belongs. It is upto the resource to use the user object and apply the necessary access control and produce authorisation errors. <?php class ExamplesApiResourceExample extends ApiResource { public function get () { // Will dump the object for the user who is making the API call var_dump ( $this -> user ); } }","title":"Access Control"},{"location":"joomla-rest-api/com-api-plugin-development/#create-xml-file","text":"Finally create a manifest XML so that your plugin can be installed. Set group as 'api', add plugin name and other details. <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension version= \"3.0.0\" type= \"plugin\" group= \"api\" method= \"upgrade\" > <name> YourPlugin </name> <version> 1.0 </version> <creationDate> 10/11/2016 </creationDate> <author></author> <description></description> <files> <filename plugin= \"your_plugin_name\" > your_plugin_name.php </filename> <folder> your_plugin_name </folder> </files> <languages folder= \"language\" > <language tag= \"en-GB\" > en-GB/en-GB.plg_api_plugin_name.ini </language> <language tag= \"en-GB\" > en-GB/en-GB.plg_api_plugin_name.sys.ini </language> </languages> </extension> Tips for writing plugins Think of API plugins as a replacement of controllers. Any business logic that you won't put in a controller, leave it out of the plugin too. Load and use your models in the plugin code. It is not recommended to have API specific language files unless absolutely necessary. You will ususally make plugins for an existing component, so load the language files from that component. To create the list and details for an object type, you can either add a condition based on id query parameter in the get() method, or have a separate resource for the list.","title":"Create .xml file"},{"location":"tj-fields/com-tjfields-add-new-field-type/","text":"How to add new field type? \u00b6 TJ-Fields supports many of the core field types provided by Joomla and it provides a way to easily add new field type or any new custom field type as per the requirement. Follow the steps given below to add new field type support in TJ-Fields. 1. Add entry of new field type in \u201ctjfieldfields\u201d field \u00b6 This is to add the new field type in the list of available field types. The field \u201ctjfieldfields\u201d is a custom field in TJ-Fields which is used to generate the HTML of dropdown to show the list of available field types. To add option of the new field type in the \u201ctjfieldfields\u201d field add the code given below in the function getInput() which is in the file on the path specified below. (Replace the \u2018FIELD_TYPE' and \u2018LANGUAGE_CONSTANT\u2019 with field type name and language constant for the label of field type respectively. <?php $options [] = JHtml :: _ ( 'select.option' , 'FIELD_TYPE' , JText :: _ ( 'LANGUAGE_CONSTANT' )); File Path YOUR_JOOMLA/administrator/components/com_tjfields/models/fields/tjfieldfields.php 2. Add XML to define attributes of the new field type \u00b6 (Neeed only if your field type has any attribute) Attributes of the field are the properties of field type which defines it e.g (For input type text name, size, value, maxlength etc are the attributes) To add attributes for the new field type create a new XML file with the name same as the name of the new field type in the folder given below. Folder Path YOUR_JOOMLA/administrator/components/com_tjfields/models/forms/types/forms Sample XML File <?xml version=\"1.0\" encoding=\"utf-8\"?> <form> <fields name= \"params\" label= \"COM_TJFIELDS_FIELD_BASIC_LABEL\" > <fieldset name= \"params\" > <field name= \"default\" type= \"text\" label= \"COM_TJFIELDS_FORM_LBL_FIELD_DEFAULT\" description= \"COM_TJFIELDS_FORM_DESC_FIELD_DEFAULT\" /> <field name= \"size\" type= \"text\" label= \"COM_TJFIELDS_FORM_LBL_FIELD_SIZE\" description= \"COM_TJFIELDS_FORM_DESC_FIELD_SIZE\" /> <field name= \"maxlength\" type= \"text\" label= \"COM_TJFIELDS_FORM_LBL_FIELD_MAXLENGTH\" description= \"COM_TJFIELDS_FORM_DESC_FIELD_SIZE\" /> </fieldset> </fields> </form> Add all the required attributes of new field under fieldset named params . Note There is no need to add basic attributes like \u201cname\u201d, \u201ctype\u201d, \u201clabel\u201d and \u201cdescription\u201d in the XML file. 3. Create form field file \u00b6 (Needed only if you are creating custom field which is not supported by Joomla) Create the form field file in the folder on path given below to define the rendering of the field on the form. Folder Path YOUR_JOOMLA/administrator/components/com_tjfields/models/fields Sample field file (Textarea Counter) <?php /** * @package TJFields * * @author Techjoomla <extensions@techjoomla.com> * @copyright Copyright (c) 2009-2019 TechJoomla. All rights reserved * @license GNU General Public License version 2, or later */ defined ( 'JPATH_PLATFORM' ) or die ; JLoader :: register ( 'JFormFieldTextarea' , JPATH_BASE . '/libraries/joomla/form/fields/textarea.php' ); /** * Form Field Textareacounter class * Supports a multi line area for entry of plain text with count char * * @since 11.1 */ class JFormFieldTextareacounter extends JFormFieldTextarea { /** * The form field type. * * @var string * @since 11.1 */ protected $type = 'Textareacounter' ; /** * The number of rows in textarea. * * @var mixed * @since 3.2 */ protected $rows ; /** * The number of columns in textarea. * * @var mixed * @since 3.2 */ protected $columns ; /** * The maximum number of characters in textarea. * * @var mixed * @since 3.4 */ protected $maxlength ; /** * The minimum number of characters in textarea. * * @var mixed * @since 3.4 */ protected $minlength ; /** * The minimum number of characters in textarea countertext. * * @var mixed * @since 3.4 */ protected $countertext ; /** * The textarea input field id. * * @var int * @since 3.4 */ protected $id ; /** * The class for textarea counter input field * * @var mixed * @since 3.4 */ protected $class ; /** * Method to attach a JForm object to the field. * * @param SimpleXMLElement $element The SimpleXMLElement object representing the <field /> tag for the form field object. * @param mixed $value The form field value to validate. * @param string $group The field name group control value. This acts as as an array container for the field. * For example if the field has name=\"foo\" and the group value is set to \"bar\" then the * full field name would end up being \"bar[foo]\". * * @return boolean True on success. * * @see JFormField::setup() * @since 3.2 */ public function setup ( SimpleXMLElement $element , $value , $group = null ) { $return = parent :: setup ( $element , $value , $group ); if ( $return ) { $this -> countertext = isset ( $this -> element [ 'countertext' ]) ? ( string ) $this -> element [ 'countertext' ] : '' ; $this -> countertext = JText :: _ ( $this -> countertext ); $this -> maxlength = isset ( $this -> element [ 'maxlength' ]) ? ( int ) $this -> element [ 'maxlength' ] : 0 ; $this -> minlength = isset ( $this -> element [ 'minlength' ]) ? ( int ) $this -> element [ 'minlength' ] : 0 ; $this -> class .= ' tjfieldTextareacounter' ; if ( ! empty ( $this -> minlength )) { $this -> class .= ' validate-min' . $this -> minlength ; } } return $return ; } /** * Method to get the textarea field input markup. * Use the rows and columns attributes to specify the dimensions of the area. * * @return string The field input markup. * * @since 11.1 */ protected function getInput () { $html = parent :: getInput (); $html .= $this -> getCounterMask (); // Using the .tjfieldTextareacounter selector $doc = JFactory :: getDocument (); $doc -> addScriptDeclaration ( ' jQuery(document).ready(function() { jQuery(\".tjfieldTextareacounter\").each(function() { let usedcharlength = parseInt(jQuery(this).val().length); let maxlength = parseInt(jQuery(this).siblings(\"span\").find(\".charscontainer_maxlength\").text()); jQuery(this).siblings(\"span\").find(\".charscontainer_filled\").text(usedcharlength); }) jQuery(\"#' . $this -> id . '\").on(\"keyup\", function() { jQuery(\"#usedchars_' . $this -> id . '\").text(jQuery(\"#' . $this -> id . '\").val().length); jQuery(\"#filledchars_' . $this -> id . '\").text(jQuery(\"#' . $this -> id . '\").val().length); }); document.formvalidator.setHandler(\"blank-space\", function(value, element) { if (value.trim() == \"\") { return false; } return true; }); }); ' ); if ( ! empty ( $this -> minlength )) { $doc -> addScriptDeclaration ( ' jQuery(document).ready(function() { document.formvalidator.setHandler(\"min' . $this -> minlength . '\", function(value) { return (value.trim().length >=' . $this -> minlength . '); }); }); ' ); } return $html ; } /** * Method to get the textarea field char count container. * * @return string The field input markup. * * @since 11.1 */ private function getCounterMask () { $text = '<span class=\"charscontainer pull-left\" id=\"charscontainer_' . $this -> id . '\">' ; if ( ! empty ( $this -> maxlength )) { $text .= $this -> countertext ; $text = str_replace ( '{used}' , '<span class=\"charscontainer_used\" id=\"usedchars_' . $this -> id . '\">0</span>' , $text ); $text = str_replace ( '{filled}' , '<span class=\"charscontainer_filled\" id=\"filledchars_' . $this -> id . '\">' . $this -> maxlength . '</span>' , $text ); $text = str_replace ( '{maxlength}' , '<span class=\"charscontainer_maxlength\" id=\"maxlength_' . $this -> id . '\">' . $this -> maxlength . '</span>' , $text ); } $text .= '</span>' ; return $text ; } }","title":"Add new field Type"},{"location":"tj-fields/com-tjfields-add-new-field-type/#how-to-add-new-field-type","text":"TJ-Fields supports many of the core field types provided by Joomla and it provides a way to easily add new field type or any new custom field type as per the requirement. Follow the steps given below to add new field type support in TJ-Fields.","title":"How to add new field type?"},{"location":"tj-fields/com-tjfields-add-new-field-type/#1-add-entry-of-new-field-type-in-tjfieldfields-field","text":"This is to add the new field type in the list of available field types. The field \u201ctjfieldfields\u201d is a custom field in TJ-Fields which is used to generate the HTML of dropdown to show the list of available field types. To add option of the new field type in the \u201ctjfieldfields\u201d field add the code given below in the function getInput() which is in the file on the path specified below. (Replace the \u2018FIELD_TYPE' and \u2018LANGUAGE_CONSTANT\u2019 with field type name and language constant for the label of field type respectively. <?php $options [] = JHtml :: _ ( 'select.option' , 'FIELD_TYPE' , JText :: _ ( 'LANGUAGE_CONSTANT' )); File Path YOUR_JOOMLA/administrator/components/com_tjfields/models/fields/tjfieldfields.php","title":"1. Add entry of new field type in \u201ctjfieldfields\u201d field"},{"location":"tj-fields/com-tjfields-add-new-field-type/#2-add-xml-to-define-attributes-of-the-new-field-type","text":"(Neeed only if your field type has any attribute) Attributes of the field are the properties of field type which defines it e.g (For input type text name, size, value, maxlength etc are the attributes) To add attributes for the new field type create a new XML file with the name same as the name of the new field type in the folder given below. Folder Path YOUR_JOOMLA/administrator/components/com_tjfields/models/forms/types/forms Sample XML File <?xml version=\"1.0\" encoding=\"utf-8\"?> <form> <fields name= \"params\" label= \"COM_TJFIELDS_FIELD_BASIC_LABEL\" > <fieldset name= \"params\" > <field name= \"default\" type= \"text\" label= \"COM_TJFIELDS_FORM_LBL_FIELD_DEFAULT\" description= \"COM_TJFIELDS_FORM_DESC_FIELD_DEFAULT\" /> <field name= \"size\" type= \"text\" label= \"COM_TJFIELDS_FORM_LBL_FIELD_SIZE\" description= \"COM_TJFIELDS_FORM_DESC_FIELD_SIZE\" /> <field name= \"maxlength\" type= \"text\" label= \"COM_TJFIELDS_FORM_LBL_FIELD_MAXLENGTH\" description= \"COM_TJFIELDS_FORM_DESC_FIELD_SIZE\" /> </fieldset> </fields> </form> Add all the required attributes of new field under fieldset named params . Note There is no need to add basic attributes like \u201cname\u201d, \u201ctype\u201d, \u201clabel\u201d and \u201cdescription\u201d in the XML file.","title":"2. Add XML to define attributes of the new field type"},{"location":"tj-fields/com-tjfields-add-new-field-type/#3-create-form-field-file","text":"(Needed only if you are creating custom field which is not supported by Joomla) Create the form field file in the folder on path given below to define the rendering of the field on the form. Folder Path YOUR_JOOMLA/administrator/components/com_tjfields/models/fields Sample field file (Textarea Counter) <?php /** * @package TJFields * * @author Techjoomla <extensions@techjoomla.com> * @copyright Copyright (c) 2009-2019 TechJoomla. All rights reserved * @license GNU General Public License version 2, or later */ defined ( 'JPATH_PLATFORM' ) or die ; JLoader :: register ( 'JFormFieldTextarea' , JPATH_BASE . '/libraries/joomla/form/fields/textarea.php' ); /** * Form Field Textareacounter class * Supports a multi line area for entry of plain text with count char * * @since 11.1 */ class JFormFieldTextareacounter extends JFormFieldTextarea { /** * The form field type. * * @var string * @since 11.1 */ protected $type = 'Textareacounter' ; /** * The number of rows in textarea. * * @var mixed * @since 3.2 */ protected $rows ; /** * The number of columns in textarea. * * @var mixed * @since 3.2 */ protected $columns ; /** * The maximum number of characters in textarea. * * @var mixed * @since 3.4 */ protected $maxlength ; /** * The minimum number of characters in textarea. * * @var mixed * @since 3.4 */ protected $minlength ; /** * The minimum number of characters in textarea countertext. * * @var mixed * @since 3.4 */ protected $countertext ; /** * The textarea input field id. * * @var int * @since 3.4 */ protected $id ; /** * The class for textarea counter input field * * @var mixed * @since 3.4 */ protected $class ; /** * Method to attach a JForm object to the field. * * @param SimpleXMLElement $element The SimpleXMLElement object representing the <field /> tag for the form field object. * @param mixed $value The form field value to validate. * @param string $group The field name group control value. This acts as as an array container for the field. * For example if the field has name=\"foo\" and the group value is set to \"bar\" then the * full field name would end up being \"bar[foo]\". * * @return boolean True on success. * * @see JFormField::setup() * @since 3.2 */ public function setup ( SimpleXMLElement $element , $value , $group = null ) { $return = parent :: setup ( $element , $value , $group ); if ( $return ) { $this -> countertext = isset ( $this -> element [ 'countertext' ]) ? ( string ) $this -> element [ 'countertext' ] : '' ; $this -> countertext = JText :: _ ( $this -> countertext ); $this -> maxlength = isset ( $this -> element [ 'maxlength' ]) ? ( int ) $this -> element [ 'maxlength' ] : 0 ; $this -> minlength = isset ( $this -> element [ 'minlength' ]) ? ( int ) $this -> element [ 'minlength' ] : 0 ; $this -> class .= ' tjfieldTextareacounter' ; if ( ! empty ( $this -> minlength )) { $this -> class .= ' validate-min' . $this -> minlength ; } } return $return ; } /** * Method to get the textarea field input markup. * Use the rows and columns attributes to specify the dimensions of the area. * * @return string The field input markup. * * @since 11.1 */ protected function getInput () { $html = parent :: getInput (); $html .= $this -> getCounterMask (); // Using the .tjfieldTextareacounter selector $doc = JFactory :: getDocument (); $doc -> addScriptDeclaration ( ' jQuery(document).ready(function() { jQuery(\".tjfieldTextareacounter\").each(function() { let usedcharlength = parseInt(jQuery(this).val().length); let maxlength = parseInt(jQuery(this).siblings(\"span\").find(\".charscontainer_maxlength\").text()); jQuery(this).siblings(\"span\").find(\".charscontainer_filled\").text(usedcharlength); }) jQuery(\"#' . $this -> id . '\").on(\"keyup\", function() { jQuery(\"#usedchars_' . $this -> id . '\").text(jQuery(\"#' . $this -> id . '\").val().length); jQuery(\"#filledchars_' . $this -> id . '\").text(jQuery(\"#' . $this -> id . '\").val().length); }); document.formvalidator.setHandler(\"blank-space\", function(value, element) { if (value.trim() == \"\") { return false; } return true; }); }); ' ); if ( ! empty ( $this -> minlength )) { $doc -> addScriptDeclaration ( ' jQuery(document).ready(function() { document.formvalidator.setHandler(\"min' . $this -> minlength . '\", function(value) { return (value.trim().length >=' . $this -> minlength . '); }); }); ' ); } return $html ; } /** * Method to get the textarea field char count container. * * @return string The field input markup. * * @since 11.1 */ private function getCounterMask () { $text = '<span class=\"charscontainer pull-left\" id=\"charscontainer_' . $this -> id . '\">' ; if ( ! empty ( $this -> maxlength )) { $text .= $this -> countertext ; $text = str_replace ( '{used}' , '<span class=\"charscontainer_used\" id=\"usedchars_' . $this -> id . '\">0</span>' , $text ); $text = str_replace ( '{filled}' , '<span class=\"charscontainer_filled\" id=\"filledchars_' . $this -> id . '\">' . $this -> maxlength . '</span>' , $text ); $text = str_replace ( '{maxlength}' , '<span class=\"charscontainer_maxlength\" id=\"maxlength_' . $this -> id . '\">' . $this -> maxlength . '</span>' , $text ); } $text .= '</span>' ; return $text ; } }","title":"3. Create form field file"},{"location":"tj-fields/com-tjfields-integrating-with-extensions/","text":"How to integrate client with TJFields? \u00b6 Here the Client represents the view (Product Creation Form) of the vertical extension (Shopping Cart Extension) where you want to use TJ - Fields to get support of custom/extra fields (Product Attributes). e.g com_quick2cart.product, com_tjlms.lesson etc To integrate TJFields with your client you need to add the code given below in respective files 1. Model file of client (Product Model) \u00b6 All the functions to retrieve form of custom/extra fields, form data and function to save data of fields are written in trait TjfieldsFilterField . <?php // Import the \u201cTrait\u201d file of TJFields in the model file JLoader :: import ( 'components.com_tjfields.filterFields' , JPATH_SITE ); class [ COMPONENT ] Model [ VIEW ] extends JModelForm { // Use imported Trait in model use TjfieldsFilterField ; } 2. view.html.php file of view (view.html.php of product form view) \u00b6 In view.html.php file you need to get the object of form of custom(Extra) fields created in TJFields so that they can be displayed in the client view. <?php // Call to form_exta function defied in TJFields trait class $input = JFactory :: getApplication () -> input ; // Id of record to which the extra data is associated $input -> set ( \"content_id\" , $id ); $model = $this -> getModel (); $this -> form_extra = $model -> getFormExtra ( $data ); The function getFormExtra() will return the JForm object of extra fields. Parameter to be passed to the function getFormExtra() $data (Array) <?php $data [ \"category\" ] => // category of content $data [ \"clientComponent\" ] => // component name $data [ \"client\" ] => //[COMPONENT_NAME].[VIEW_NAME] $data [ \"view\" ] => [ VIEW_NAME ] $data [ \"layout\" ] => // Layout name Example <?php $this -> form_extra = array (); $Quick2cartModelProduct = $this -> getModel ( 'product' ); // Call to extra fields $this -> form_extra = $Quick2cartModelProduct -> getFormExtra ( array ( \"category\" => $this -> itemDetail [ 'category' ], \"clientComponent\" => 'com_quick2cart' , \"client\" => 'com_quick2cart.product' , \"view\" => 'product' , \"layout\" => 'new' ) ); $this -> form_extra = array_filter ( $this -> form_extra ); 3. Layout file of view \u00b6 You need to add the layout file named default_extrafields.php in the tmpl folder of the view Code to call the default_extrafields layout. (You need to paste this in default layout of the client form view) <?php if ( ! empty ( $this -> form_extra )) { echo $this -> loadTemplate ( 'extrafields' ); } Code for the extrafields layout <?php /** * @package TJFields * * @author Techjoomla <extensions@techjoomla.com> * @copyright Copyright (c) 2009-2019 TechJoomla. All rights reserved. * @license GNU General Public License version 2 or later. */ // No direct access defined ( '_JEXEC' ) or die ; $fieldsets_counter = 0 ; $layout = JFactory :: getApplication () -> input -> get ( 'layout' ); if ( $this -> form_extra ) { // Iterate through the normal form fieldsets and display each one $fieldSets = $this -> form_extra -> getFieldsets (); foreach ( $fieldSets as $fieldset ) { if ( count ( $fieldSets ) > 1 ) { if ( $fieldsets_counter == 0 ) { echo JHtml :: _ ( 'bootstrap.startTabSet' , 'extrafields_myTab' ); } $fieldsets_counter ++ ; if ( count ( $this -> form_extra -> getFieldset ( $fieldset -> name ))) { foreach ( $this -> form_extra -> getFieldset ( $fieldset -> name ) as $field ) { if ( ! $field -> hidden ) { $tabName = JFilterOutput :: stringURLUnicodeSlug ( trim ( $fieldset -> name )); echo JHtml :: _ ( \"bootstrap.addTab\" , \"extrafields_myTab\" , $tabName , $fieldset -> name ); break ; } } } } ?> <div class=\"row\"> <?php // Iterate through the fields and display them foreach ( $this -> form_extra -> getFieldset ( $fieldset -> name ) as $field ) { if ( ! $field -> hidden ) { ?> <div class=\"col-xs-12 col-md-6\"> <div class=\"form-group\"> <div class=\"col-sm-4 control-label\"> <?php echo $field -> label ; ?> </div> <div class=\"col-sm-8\"> <?php echo $field -> input ; ?> </div> <?php // TODO :- Check and remove if ( $field -> type == 'File' ) { ?> <script type=\"text/javascript\"> jQuery(document).ready(function () { var fieldValue = \" <?php echo $field -> value ; ?> \"; var AttrRequired = jQuery('# <?php echo $field -> id ; ?> ').attr('required'); if (typeof AttrRequired !== typeof undefined && AttrRequired !== false) { if (fieldValue) { jQuery('# <?php echo $field -> id ; ?> ').removeAttr(\"required\"); jQuery('# <?php echo $field -> id ; ?> ').removeClass(\"required\"); } } }); </script> <?php } ?> </div> </div> <?php } } ?> </div> <?php if ( count ( $fieldSets ) > 1 ) { if ( count ( $this -> form_extra -> getFieldset ( $fieldset -> name ))) { foreach ( $this -> form_extra -> getFieldset ( $fieldset -> name ) as $field ) { if ( ! $field -> hidden ) { echo JHtml :: _ ( \"bootstrap.endTab\" ); break ; } } } } } if ( count ( $fieldSets ) > 1 ) { echo JHtml :: _ ( 'bootstrap.endTabSet' ); } } else { ?> <div class=\"alert alert-info\"> <?php echo JText :: _ ( 'COM_TJFIELDS_NO_EXTRA_FIELDS_FOUND' ); ?> </div> <?php } 4. Model file of client (Form/View) \u00b6 Till now we have rendered the custom(Extra) fields in the client form and now we will add the code to save the data of custom(Extra) fields in TJFields tables. (Store prodcut's attribute values) Add the line given below in the save() function of model file of client to save the data of custom fields. <?php $this -> saveExtraFields ( $data ) Parameter to be passed to the function saveExtraFields() $data (Array) <?php Array ( [ content_id ] => 1 [ client ] => com_quick2cart . product [ fieldsvalue ] => Array ( [ com_quick2cart_product_color ] => Array ( [ 0 ] => red ) [ com_quick2cart_product_Screensize ] => 122 [ com_quick2cart_product_size ] => m ) ) 5. Model file of client (Form/View) \u00b6 We are done with storing the data of custom fields, now we need to add the code to delete the data of custom fields when the parent record for the extra data is deleted. (When we delete the product we need to delete the extra fields data associalted with the product from the TJFields tables) Add the line given below in the delete() function of model file of client to delete the data of custom fields. <?php $this -> deleteExtraFieldsData ( $content_id , $client ); Parameters to be passed to the function deleteExtraFieldsData() 1) $content_id (Int) e.g Product Id 2) $client (String) e.g com_quick2cart.product 6. Model file of client (Form/View) \u00b6 If you want to use the TJFields Filter Module to filter out the content of the client then you need to add the code given below <?php JLoader :: import ( 'components.com_tjfields.helpers.tjfields' , JPATH_SITE ); $tjFieldsHelper = new TjfieldsHelper ; $contentIds = $tjFieldsHelper -> getFilterResults (); $client = JFactory :: getApplication () -> input -> get ( 'client' , '' , 'string' ); if ( ! empty ( $client )) { if ( $contentIds != '-2' ) { $query -> where ( \"a.item_id IN (\" . $tjfieldItem_ids . \")\" ); } }","title":"Integrating with extensions"},{"location":"tj-fields/com-tjfields-integrating-with-extensions/#how-to-integrate-client-with-tjfields","text":"Here the Client represents the view (Product Creation Form) of the vertical extension (Shopping Cart Extension) where you want to use TJ - Fields to get support of custom/extra fields (Product Attributes). e.g com_quick2cart.product, com_tjlms.lesson etc To integrate TJFields with your client you need to add the code given below in respective files","title":"How to integrate client with TJFields?"},{"location":"tj-fields/com-tjfields-integrating-with-extensions/#1-model-file-of-client-product-model","text":"All the functions to retrieve form of custom/extra fields, form data and function to save data of fields are written in trait TjfieldsFilterField . <?php // Import the \u201cTrait\u201d file of TJFields in the model file JLoader :: import ( 'components.com_tjfields.filterFields' , JPATH_SITE ); class [ COMPONENT ] Model [ VIEW ] extends JModelForm { // Use imported Trait in model use TjfieldsFilterField ; }","title":"1. Model file of client (Product Model)"},{"location":"tj-fields/com-tjfields-integrating-with-extensions/#2-viewhtmlphp-file-of-view-viewhtmlphp-of-product-form-view","text":"In view.html.php file you need to get the object of form of custom(Extra) fields created in TJFields so that they can be displayed in the client view. <?php // Call to form_exta function defied in TJFields trait class $input = JFactory :: getApplication () -> input ; // Id of record to which the extra data is associated $input -> set ( \"content_id\" , $id ); $model = $this -> getModel (); $this -> form_extra = $model -> getFormExtra ( $data ); The function getFormExtra() will return the JForm object of extra fields. Parameter to be passed to the function getFormExtra() $data (Array) <?php $data [ \"category\" ] => // category of content $data [ \"clientComponent\" ] => // component name $data [ \"client\" ] => //[COMPONENT_NAME].[VIEW_NAME] $data [ \"view\" ] => [ VIEW_NAME ] $data [ \"layout\" ] => // Layout name Example <?php $this -> form_extra = array (); $Quick2cartModelProduct = $this -> getModel ( 'product' ); // Call to extra fields $this -> form_extra = $Quick2cartModelProduct -> getFormExtra ( array ( \"category\" => $this -> itemDetail [ 'category' ], \"clientComponent\" => 'com_quick2cart' , \"client\" => 'com_quick2cart.product' , \"view\" => 'product' , \"layout\" => 'new' ) ); $this -> form_extra = array_filter ( $this -> form_extra );","title":"2. view.html.php file of view (view.html.php of product form view)"},{"location":"tj-fields/com-tjfields-integrating-with-extensions/#3-layout-file-of-view","text":"You need to add the layout file named default_extrafields.php in the tmpl folder of the view Code to call the default_extrafields layout. (You need to paste this in default layout of the client form view) <?php if ( ! empty ( $this -> form_extra )) { echo $this -> loadTemplate ( 'extrafields' ); } Code for the extrafields layout <?php /** * @package TJFields * * @author Techjoomla <extensions@techjoomla.com> * @copyright Copyright (c) 2009-2019 TechJoomla. All rights reserved. * @license GNU General Public License version 2 or later. */ // No direct access defined ( '_JEXEC' ) or die ; $fieldsets_counter = 0 ; $layout = JFactory :: getApplication () -> input -> get ( 'layout' ); if ( $this -> form_extra ) { // Iterate through the normal form fieldsets and display each one $fieldSets = $this -> form_extra -> getFieldsets (); foreach ( $fieldSets as $fieldset ) { if ( count ( $fieldSets ) > 1 ) { if ( $fieldsets_counter == 0 ) { echo JHtml :: _ ( 'bootstrap.startTabSet' , 'extrafields_myTab' ); } $fieldsets_counter ++ ; if ( count ( $this -> form_extra -> getFieldset ( $fieldset -> name ))) { foreach ( $this -> form_extra -> getFieldset ( $fieldset -> name ) as $field ) { if ( ! $field -> hidden ) { $tabName = JFilterOutput :: stringURLUnicodeSlug ( trim ( $fieldset -> name )); echo JHtml :: _ ( \"bootstrap.addTab\" , \"extrafields_myTab\" , $tabName , $fieldset -> name ); break ; } } } } ?> <div class=\"row\"> <?php // Iterate through the fields and display them foreach ( $this -> form_extra -> getFieldset ( $fieldset -> name ) as $field ) { if ( ! $field -> hidden ) { ?> <div class=\"col-xs-12 col-md-6\"> <div class=\"form-group\"> <div class=\"col-sm-4 control-label\"> <?php echo $field -> label ; ?> </div> <div class=\"col-sm-8\"> <?php echo $field -> input ; ?> </div> <?php // TODO :- Check and remove if ( $field -> type == 'File' ) { ?> <script type=\"text/javascript\"> jQuery(document).ready(function () { var fieldValue = \" <?php echo $field -> value ; ?> \"; var AttrRequired = jQuery('# <?php echo $field -> id ; ?> ').attr('required'); if (typeof AttrRequired !== typeof undefined && AttrRequired !== false) { if (fieldValue) { jQuery('# <?php echo $field -> id ; ?> ').removeAttr(\"required\"); jQuery('# <?php echo $field -> id ; ?> ').removeClass(\"required\"); } } }); </script> <?php } ?> </div> </div> <?php } } ?> </div> <?php if ( count ( $fieldSets ) > 1 ) { if ( count ( $this -> form_extra -> getFieldset ( $fieldset -> name ))) { foreach ( $this -> form_extra -> getFieldset ( $fieldset -> name ) as $field ) { if ( ! $field -> hidden ) { echo JHtml :: _ ( \"bootstrap.endTab\" ); break ; } } } } } if ( count ( $fieldSets ) > 1 ) { echo JHtml :: _ ( 'bootstrap.endTabSet' ); } } else { ?> <div class=\"alert alert-info\"> <?php echo JText :: _ ( 'COM_TJFIELDS_NO_EXTRA_FIELDS_FOUND' ); ?> </div> <?php }","title":"3. Layout file of view"},{"location":"tj-fields/com-tjfields-integrating-with-extensions/#4-model-file-of-client-formview","text":"Till now we have rendered the custom(Extra) fields in the client form and now we will add the code to save the data of custom(Extra) fields in TJFields tables. (Store prodcut's attribute values) Add the line given below in the save() function of model file of client to save the data of custom fields. <?php $this -> saveExtraFields ( $data ) Parameter to be passed to the function saveExtraFields() $data (Array) <?php Array ( [ content_id ] => 1 [ client ] => com_quick2cart . product [ fieldsvalue ] => Array ( [ com_quick2cart_product_color ] => Array ( [ 0 ] => red ) [ com_quick2cart_product_Screensize ] => 122 [ com_quick2cart_product_size ] => m ) )","title":"4. Model file of client (Form/View)"},{"location":"tj-fields/com-tjfields-integrating-with-extensions/#5-model-file-of-client-formview","text":"We are done with storing the data of custom fields, now we need to add the code to delete the data of custom fields when the parent record for the extra data is deleted. (When we delete the product we need to delete the extra fields data associalted with the product from the TJFields tables) Add the line given below in the delete() function of model file of client to delete the data of custom fields. <?php $this -> deleteExtraFieldsData ( $content_id , $client ); Parameters to be passed to the function deleteExtraFieldsData() 1) $content_id (Int) e.g Product Id 2) $client (String) e.g com_quick2cart.product","title":"5. Model file of client (Form/View)"},{"location":"tj-fields/com-tjfields-integrating-with-extensions/#6-model-file-of-client-formview","text":"If you want to use the TJFields Filter Module to filter out the content of the client then you need to add the code given below <?php JLoader :: import ( 'components.com_tjfields.helpers.tjfields' , JPATH_SITE ); $tjFieldsHelper = new TjfieldsHelper ; $contentIds = $tjFieldsHelper -> getFilterResults (); $client = JFactory :: getApplication () -> input -> get ( 'client' , '' , 'string' ); if ( ! empty ( $client )) { if ( $contentIds != '-2' ) { $query -> where ( \"a.item_id IN (\" . $tjfieldItem_ids . \")\" ); } }","title":"6. Model file of client (Form/View)"},{"location":"tj-fields/tjfields-introduction/","text":"TJFields is a horizontal extension used to extend the existing forms (Adding custom fields) of any client component. Why TJFields? \u00b6 TJFields helps in mitigating the flexible business requirements by quickly customising the fields on the form of the client component. Using TJFields you can extend the existing form by adding custom fields in it with ease i.e without getting your hands dirty with code to save and render the extra custom fields data in the form. Also, the data stored in the extra custom fields can be used for filtering the content of the client component. The extensions by Techjoomla, like Quick2Cart, JGive and JTicketing uses TJFields to filter their respective content. E.g Consider that we have a online shopping cart (Quick2Cart) system in which sellers can create products and sell those online. Sellers can sell different types of products with different product attributes (Size, Colour, Height, Weight, Screen size and many more) and as an extension developer you cant provide all these differnt types of fields in product creation form as the product attributes differ for different products. In this case you can integrate TJFields with your product creation form which will provide you the flexibility to extend your product creation form by adding custom(Extra) fields powered by TJFields. You can create different fields for different categories of the client form (E.g Attributes like Screensize, RAM, ROM, Processor, Operating System etc for products of category Laptops and Mobiles and Attributes like Size, Colour, Matterial, Waist size etc for products of clothes category) Note Also, you can use the added custom fields as the filters (Using TJFields Filter Module) to filter the content of the client (E.g The product attributes Screensize, RAM, ROM etc can be used as filters to filter the products of laptop category) Available Field Types \u00b6 Text Radio Checkbox List Single Select Multi Select Sql Textarea Textareacounter Calendar Editor Email File Spacer Subform Image Audio Video Number Hidden","title":"Introduction"},{"location":"tj-fields/tjfields-introduction/#why-tjfields","text":"TJFields helps in mitigating the flexible business requirements by quickly customising the fields on the form of the client component. Using TJFields you can extend the existing form by adding custom fields in it with ease i.e without getting your hands dirty with code to save and render the extra custom fields data in the form. Also, the data stored in the extra custom fields can be used for filtering the content of the client component. The extensions by Techjoomla, like Quick2Cart, JGive and JTicketing uses TJFields to filter their respective content. E.g Consider that we have a online shopping cart (Quick2Cart) system in which sellers can create products and sell those online. Sellers can sell different types of products with different product attributes (Size, Colour, Height, Weight, Screen size and many more) and as an extension developer you cant provide all these differnt types of fields in product creation form as the product attributes differ for different products. In this case you can integrate TJFields with your product creation form which will provide you the flexibility to extend your product creation form by adding custom(Extra) fields powered by TJFields. You can create different fields for different categories of the client form (E.g Attributes like Screensize, RAM, ROM, Processor, Operating System etc for products of category Laptops and Mobiles and Attributes like Size, Colour, Matterial, Waist size etc for products of clothes category) Note Also, you can use the added custom fields as the filters (Using TJFields Filter Module) to filter the content of the client (E.g The product attributes Screensize, RAM, ROM etc can be used as filters to filter the products of laptop category)","title":"Why TJFields?"},{"location":"tj-fields/tjfields-introduction/#available-field-types","text":"Text Radio Checkbox List Single Select Multi Select Sql Textarea Textareacounter Calendar Editor Email File Spacer Subform Image Audio Video Number Hidden","title":"Available Field Types"},{"location":"tj-queue/tjqueue-integrating-with-extensions/","text":"TjQueue integration steps \u00b6 Note PHP 7.1 or higher version needed to run Tjqueue. Installation and configuration \u00b6 Installation Backup your Joomla site using tools like Akeeba Backup before installation Install TjQueue package. Configuration Config Name Description Topic Name Name of the default topic to which messages will be sent. Developers may choose to create additional queues for other workloads and use them with the producer and CLI scripts. The suggested format for this is environment-purpose eg: prod-default-queue Queue Handler Choose which adapter should handle the queue. Some adapters need additional configuration. eg: the SQS adapter will need the AWS credentials and the region name. AWS Key Key to access AWS SQS AWS Secret Secret to access AWS SQS AWS Region Region where sqs in located e.g ap-south-1 Go to TjQueue -> Options -> and save the options. Produce Message \u00b6 Message \u00b6 A message data. e.g ['foo', 'bar'] or {foo:\"Something\"} or Hello world etc. <?php use TJQueue\\Admin\\TJQueueProduce ; jimport ( 'tjqueueproduce' , JPATH_SITE . '/administrator/components/com_tjqueue/libraries' ); // Create object of message produce class $TJQueueProduce = new TJQueueProduce ; // Set message body - This can be any data $messageBody = \"This is message\" ; $TJQueueProduce -> message -> setBody ( $messageBody ); // Push the message to queue $TJQueueProduce -> produce (); Property \u00b6 <?php use TJQueue\\Admin\\TJQueueProduce ; jimport ( 'tjqueueproduce' , JPATH_SITE . '/administrator/components/com_tjqueue/libraries' ); // Create object of message produce class $TJQueueProduce = new TJQueueProduce ; $TJQueueProduce -> message -> setProperty ( 'client' , 'pluginName.consumeClassFileName' ); // Push the message to queue $TJQueueProduce -> produce (); Delay \u00b6 Message sent with a delay set is processed after the delay time exceed. Some brokers may not support it from scratch. <?php use TJQueue\\Admin\\TJQueueProduce ; jimport ( 'tjqueueproduce' , JPATH_SITE . '/administrator/components/com_tjqueue/libraries' ); // Create object of message produce class $TJQueueProduce = new TJQueueProduce ; $TJQueueProduce -> message -> setDelay ( 60 ); // seconds // Push the message to queue $TJQueueProduce -> produce (); Expiration (TTL) \u00b6 The message may have an expiration or TTL (time to live). The message is removed from the queue if the expiration exceeded but the message has not been consumed. For example, it makes sense to send a forgot password email within the first few minutes, nobody needs it in an hour. <?php use TJQueue\\Admin\\TJQueueProduce ; jimport ( 'tjqueueproduce' , JPATH_SITE . '/administrator/components/com_tjqueue/libraries' ); // Create object of message produce class $TJQueueProduce = new TJQueueProduce ; $TJQueueProduce -> message -> setExpire ( 60 ); // seconds // Push the message to queue $TJQueueProduce -> produce (); Priority \u00b6 You can set a priority If you want a message to be processed quicker than other messages in the queue. Client defines five priority constants: messagePriority::VERY_LOW messagePriority::LOW messagePriority::NORMAL ( default ) messagePriority::HIGH messagePriority::VERY_HIGH <?php use TJQueue\\Admin\\TJQueueProduce ; jimport ( 'tjqueueproduce' , JPATH_SITE . '/administrator/components/com_tjqueue/libraries' ); // Create object of message produce class $TJQueueProduce = new TJQueueProduce ; $TJQueueProduce -> message -> setMessagePriority ( 'NORMAL' ); // Push the message to queue $TJQueueProduce -> produce (); Timestamp, Content type, Message id \u00b6 Those are self describing things. Usually, they are set by Client so you don't have to worry about them. If you do not like what Client set you can always set custom values: <?php use TJQueue\\Admin\\TJQueueProduce ; jimport ( 'tjqueueproduce' , JPATH_SITE . '/administrator/components/com_tjqueue/libraries' ); // Create object of message produce class $TJQueueProduce = new TJQueueProduce ; $TJQueueProduce -> message -> setCustomMessageId ( 'aCustomMessageId' ); $TJQueueProduce -> message -> setTimestamp ( time ()); $TJQueueProduce -> message -> setContentType ( 'text/plain' ); // Push the message to queue $TJQueueProduce -> produce (); Consume Message \u00b6 Writing consumer class \u00b6 TjQueue dequeues the message and sends it to consume class, So now it's up to the consumer class to how to consume the message. TjQueue derive the consumer class name and class file path from client value. Let's see an example E.g client = core.email. TjQueue explode's the client by dot(.) operator. So here Plugin name:- core File name:- email.php Class name (E.g Tjqueue**CoreEmail**) File path: /plugins/tjqueue/{PLUGIN_NAME}/consumers/{CONSUMER_NAME}.php. E.g /plugins/tjqueue/ core /consumers/ email.php This class file should have method consume Refer the following code to implement message consumer class <?php // No direct access defined ( '_JEXEC' ) or die ; class TjQueuePluginNameConsumerName // E.g TjqueueCoreEmail { /** * Method the consume the Message * * @param string $message A Message * * @return boolean This method should return acknowledgement flag, If 'true' then it will assume message is consumed successfully and it can be removed from queue. If 'false' then message consumption failed and needs to reprocess. * * @since 0.0.1 */ public function consume ( $message ) { $messageBody = $message -> getBody (); /* * Consume message code goes here. */ // Send acknowledgment flag based to consumption success/failed return true / false ; } } Message Properties \u00b6 Message object have getter's method to read the properties that set while crafting the message. Body Custom Message id Timestamp Content type Property <?php $messageBody = $message -> getBody (); $aCustomMessageId = $message -> getCustomMessageId (); $timestamp = $message -> getTimestamp (); $contentType = $message -> getContentType (); $property = $message -> getProperty ( 'propertyName' ); ?> Cron Setup \u00b6 TjQueue comes with Joomla CLI script which dequeues the message and sends it to the consumer class. php JOOMLA_SITE/cli/tjqueue.php -t TOPIC_NAME -n MESSAGES_LIMIT OR php JOOMLA_SITE/cli/tjqueue.php --topic = \"TOPIC_NAME\" --n = \"MESSAGES_LIMIT\" Cron parameters \u00b6 TOPIC_NAME: Name of the topic from which messages to read. (In case of AWS SQS this is the queue name) MESSAGES_LIMIT (optional): Number of Messages to read from the queue(Default 50).","title":"Integrating with extensions"},{"location":"tj-queue/tjqueue-integrating-with-extensions/#tjqueue-integration-steps","text":"Note PHP 7.1 or higher version needed to run Tjqueue.","title":"TjQueue integration steps"},{"location":"tj-queue/tjqueue-integrating-with-extensions/#installation-and-configuration","text":"Installation Backup your Joomla site using tools like Akeeba Backup before installation Install TjQueue package. Configuration Config Name Description Topic Name Name of the default topic to which messages will be sent. Developers may choose to create additional queues for other workloads and use them with the producer and CLI scripts. The suggested format for this is environment-purpose eg: prod-default-queue Queue Handler Choose which adapter should handle the queue. Some adapters need additional configuration. eg: the SQS adapter will need the AWS credentials and the region name. AWS Key Key to access AWS SQS AWS Secret Secret to access AWS SQS AWS Region Region where sqs in located e.g ap-south-1 Go to TjQueue -> Options -> and save the options.","title":"Installation and configuration"},{"location":"tj-queue/tjqueue-integrating-with-extensions/#produce-message","text":"","title":"Produce Message"},{"location":"tj-queue/tjqueue-integrating-with-extensions/#message","text":"A message data. e.g ['foo', 'bar'] or {foo:\"Something\"} or Hello world etc. <?php use TJQueue\\Admin\\TJQueueProduce ; jimport ( 'tjqueueproduce' , JPATH_SITE . '/administrator/components/com_tjqueue/libraries' ); // Create object of message produce class $TJQueueProduce = new TJQueueProduce ; // Set message body - This can be any data $messageBody = \"This is message\" ; $TJQueueProduce -> message -> setBody ( $messageBody ); // Push the message to queue $TJQueueProduce -> produce ();","title":"Message"},{"location":"tj-queue/tjqueue-integrating-with-extensions/#property","text":"<?php use TJQueue\\Admin\\TJQueueProduce ; jimport ( 'tjqueueproduce' , JPATH_SITE . '/administrator/components/com_tjqueue/libraries' ); // Create object of message produce class $TJQueueProduce = new TJQueueProduce ; $TJQueueProduce -> message -> setProperty ( 'client' , 'pluginName.consumeClassFileName' ); // Push the message to queue $TJQueueProduce -> produce ();","title":"Property"},{"location":"tj-queue/tjqueue-integrating-with-extensions/#delay","text":"Message sent with a delay set is processed after the delay time exceed. Some brokers may not support it from scratch. <?php use TJQueue\\Admin\\TJQueueProduce ; jimport ( 'tjqueueproduce' , JPATH_SITE . '/administrator/components/com_tjqueue/libraries' ); // Create object of message produce class $TJQueueProduce = new TJQueueProduce ; $TJQueueProduce -> message -> setDelay ( 60 ); // seconds // Push the message to queue $TJQueueProduce -> produce ();","title":"Delay"},{"location":"tj-queue/tjqueue-integrating-with-extensions/#expiration-ttl","text":"The message may have an expiration or TTL (time to live). The message is removed from the queue if the expiration exceeded but the message has not been consumed. For example, it makes sense to send a forgot password email within the first few minutes, nobody needs it in an hour. <?php use TJQueue\\Admin\\TJQueueProduce ; jimport ( 'tjqueueproduce' , JPATH_SITE . '/administrator/components/com_tjqueue/libraries' ); // Create object of message produce class $TJQueueProduce = new TJQueueProduce ; $TJQueueProduce -> message -> setExpire ( 60 ); // seconds // Push the message to queue $TJQueueProduce -> produce ();","title":"Expiration (TTL)"},{"location":"tj-queue/tjqueue-integrating-with-extensions/#priority","text":"You can set a priority If you want a message to be processed quicker than other messages in the queue. Client defines five priority constants: messagePriority::VERY_LOW messagePriority::LOW messagePriority::NORMAL ( default ) messagePriority::HIGH messagePriority::VERY_HIGH <?php use TJQueue\\Admin\\TJQueueProduce ; jimport ( 'tjqueueproduce' , JPATH_SITE . '/administrator/components/com_tjqueue/libraries' ); // Create object of message produce class $TJQueueProduce = new TJQueueProduce ; $TJQueueProduce -> message -> setMessagePriority ( 'NORMAL' ); // Push the message to queue $TJQueueProduce -> produce ();","title":"Priority"},{"location":"tj-queue/tjqueue-integrating-with-extensions/#timestamp-content-type-message-id","text":"Those are self describing things. Usually, they are set by Client so you don't have to worry about them. If you do not like what Client set you can always set custom values: <?php use TJQueue\\Admin\\TJQueueProduce ; jimport ( 'tjqueueproduce' , JPATH_SITE . '/administrator/components/com_tjqueue/libraries' ); // Create object of message produce class $TJQueueProduce = new TJQueueProduce ; $TJQueueProduce -> message -> setCustomMessageId ( 'aCustomMessageId' ); $TJQueueProduce -> message -> setTimestamp ( time ()); $TJQueueProduce -> message -> setContentType ( 'text/plain' ); // Push the message to queue $TJQueueProduce -> produce ();","title":"Timestamp, Content type, Message id"},{"location":"tj-queue/tjqueue-integrating-with-extensions/#consume-message","text":"","title":"Consume Message"},{"location":"tj-queue/tjqueue-integrating-with-extensions/#writing-consumer-class","text":"TjQueue dequeues the message and sends it to consume class, So now it's up to the consumer class to how to consume the message. TjQueue derive the consumer class name and class file path from client value. Let's see an example E.g client = core.email. TjQueue explode's the client by dot(.) operator. So here Plugin name:- core File name:- email.php Class name (E.g Tjqueue**CoreEmail**) File path: /plugins/tjqueue/{PLUGIN_NAME}/consumers/{CONSUMER_NAME}.php. E.g /plugins/tjqueue/ core /consumers/ email.php This class file should have method consume Refer the following code to implement message consumer class <?php // No direct access defined ( '_JEXEC' ) or die ; class TjQueuePluginNameConsumerName // E.g TjqueueCoreEmail { /** * Method the consume the Message * * @param string $message A Message * * @return boolean This method should return acknowledgement flag, If 'true' then it will assume message is consumed successfully and it can be removed from queue. If 'false' then message consumption failed and needs to reprocess. * * @since 0.0.1 */ public function consume ( $message ) { $messageBody = $message -> getBody (); /* * Consume message code goes here. */ // Send acknowledgment flag based to consumption success/failed return true / false ; } }","title":"Writing consumer class"},{"location":"tj-queue/tjqueue-integrating-with-extensions/#message-properties","text":"Message object have getter's method to read the properties that set while crafting the message. Body Custom Message id Timestamp Content type Property <?php $messageBody = $message -> getBody (); $aCustomMessageId = $message -> getCustomMessageId (); $timestamp = $message -> getTimestamp (); $contentType = $message -> getContentType (); $property = $message -> getProperty ( 'propertyName' ); ?>","title":"Message Properties"},{"location":"tj-queue/tjqueue-integrating-with-extensions/#cron-setup","text":"TjQueue comes with Joomla CLI script which dequeues the message and sends it to the consumer class. php JOOMLA_SITE/cli/tjqueue.php -t TOPIC_NAME -n MESSAGES_LIMIT OR php JOOMLA_SITE/cli/tjqueue.php --topic = \"TOPIC_NAME\" --n = \"MESSAGES_LIMIT\"","title":"Cron Setup"},{"location":"tj-queue/tjqueue-integrating-with-extensions/#cron-parameters","text":"TOPIC_NAME: Name of the topic from which messages to read. (In case of AWS SQS this is the queue name) MESSAGES_LIMIT (optional): Number of Messages to read from the queue(Default 50).","title":"Cron parameters"},{"location":"tj-queue/tjqueue-introduction/","text":"Background \u00b6 Several extensions have the need to do some heavy processing (inserting/updating lots of DB records, complex queries). A lot of this can be moved to background processing. TJ Queue allows creating these background jobs. Any extension that wishes to use the background job queue can create a consumer that implements the 'job' they wish to perform. They can then 'produce' a message with the inputs needed by the job. The TJ Queue cron job will take care of fetching the messages and executing the job. Solution \u00b6 This extension will provide facility to queue data and process queue as per priority. Data will be deleted from the queue once it's executed successfully and the log will be stored in log file.","title":"Introduction"},{"location":"tj-queue/tjqueue-introduction/#background","text":"Several extensions have the need to do some heavy processing (inserting/updating lots of DB records, complex queries). A lot of this can be moved to background processing. TJ Queue allows creating these background jobs. Any extension that wishes to use the background job queue can create a consumer that implements the 'job' they wish to perform. They can then 'produce' a message with the inputs needed by the job. The TJ Queue cron job will take care of fetching the messages and executing the job.","title":"Background"},{"location":"tj-queue/tjqueue-introduction/#solution","text":"This extension will provide facility to queue data and process queue as per priority. Data will be deleted from the queue once it's executed successfully and the log will be stored in log file.","title":"Solution"},{"location":"tj-reports/tjreports-architecture-overview/","text":"In terms of data structure, the TJReports framework is a Joomla MVC List view, with added features for saving queries, modifying columns and dynamic filters. Since reports are typically tabular data, reusing existing list view infrastructure was an obvious choice. So under the hood, it simply extends JModelList. The key difference is that instead of a single model, the framework allows plugins to extend the base reports model and provide a query or list for the report. Plugin Architecture \u00b6 TJReports allows a plugin driven approach to creating \"pluggable models\" that can be rendered as a report. Each plugin is essentially a model class that can have Joomla's getListQuery() or getItems() method to either return a query object, or directly the array of items to display. Note So TJReports does not use plugins in their classic event/dispatcher pattern. Instead, TJReports uses plugins to simplify installation and set any defaults via parameters. To implement filters, sorting and dynamic columns there are additional methods that allow setting column names, toggle sortable and filter columns and choose which columns may be hidden by the user. Once a plugin is installed, an instance of the plugin needs to be created for the report to be accessed. This is similar to how Modules work in Joomla. Each instance can have default filters, columns and sorting. This way, it is possible to set up different reports by using a combination of default columns and filters. Plugin instances are stored in a table along with their configuration. The reports framework loads an instance of a report plugin by it's id. Additionally, ACL can be applied to each instance so it becomes possible to create multiple lists from the same plugin, but with different filters that can be set such that users cannot change the filters. Component Architecture \u00b6 As mentioned above, the component loads a single plugin instance using it's configuration. The component also applies the ACL based on the instance configuration. The component allows users to create saved queries. Saved queries are stored similar to an instance, but they inherit the ACL and configuration superset of the instance they are created from.","title":"Architecture Overview"},{"location":"tj-reports/tjreports-architecture-overview/#plugin-architecture","text":"TJReports allows a plugin driven approach to creating \"pluggable models\" that can be rendered as a report. Each plugin is essentially a model class that can have Joomla's getListQuery() or getItems() method to either return a query object, or directly the array of items to display. Note So TJReports does not use plugins in their classic event/dispatcher pattern. Instead, TJReports uses plugins to simplify installation and set any defaults via parameters. To implement filters, sorting and dynamic columns there are additional methods that allow setting column names, toggle sortable and filter columns and choose which columns may be hidden by the user. Once a plugin is installed, an instance of the plugin needs to be created for the report to be accessed. This is similar to how Modules work in Joomla. Each instance can have default filters, columns and sorting. This way, it is possible to set up different reports by using a combination of default columns and filters. Plugin instances are stored in a table along with their configuration. The reports framework loads an instance of a report plugin by it's id. Additionally, ACL can be applied to each instance so it becomes possible to create multiple lists from the same plugin, but with different filters that can be set such that users cannot change the filters.","title":"Plugin Architecture"},{"location":"tj-reports/tjreports-architecture-overview/#component-architecture","text":"As mentioned above, the component loads a single plugin instance using it's configuration. The component also applies the ACL based on the instance configuration. The component allows users to create saved queries. Saved queries are stored similar to an instance, but they inherit the ACL and configuration superset of the instance they are created from.","title":"Component Architecture"},{"location":"tj-reports/tjreports-integration-guide/","text":"Installing the default instances \u00b6 The reporting plugin only offers the code needed for the report. For the report to be usable, it needs to be configured. An extension developer who wishes to create default 'instances' for the plugins can do that by adding the below method in the installation script. In order to use plugin, after installation you need to enable that plugin and to add your plugin detail to table. Below is the code that will add new entry in the table for missing plugins. <?php JModelLegacy :: addIncludePath ( JPATH_ADMINISTRATOR . '/components/com_tjreports/models' ); $model = JModelLegacy :: getInstance ( 'Reports' , 'TjreportsModel' ); $installed = $model -> addTjReportsPlugins (); If you are intalling plugin as a part of a package. You can call above method in postflight of package script. Above method requires some detail from your plugin so you must have below method that will return plugin detail. <?php public function getPluginDetail () { $detail = array ( 'client' => 'com_example' , 'title' => JText :: _ ( 'PLG_TJREPORTS_EXAMPLEREPORT_TITLE' )); return $detail ; } $detail array of above method should have following details - a) client - This is used for grouping of your plugins. b) title - This is the title of your plugin visible to users. Linking to TJ reports \u00b6 Just like other infrastructure extensions, you can pass the client context to show reports related to your extension. For instance Shika uses index.php?option=com_tjreports&client=tjlms for reports contextual to Shika LMS. The client is be specified when creating instances. When user passes client parameter in the url at backend, framework also fetches the menus added in the addSubmenu of the component you passed in the client parameter. Below is the default URL for your extension <?php index . php ? option = com_tjreports & client = com_example & task = reports . defaultReport This will bring you to the first plugin of that client type. Plugin configuration options - \u00b6 One can limit number of columns to show in the Report using plugin configuration. When you edit a plugin in tjreport you can load default params using Load Default Params . This data depends on the details you have mentioned in your plugin __construct. Below is the example JSON Data - { \"filter_order\" : \"name\" , \"filter_order_Dir\" : \"ASC\" , \"limit\" : \"20\" , \"showHideColumns\" :[ \"attempt\" , \"name\" , \"username\" , \"usergroup\" , \"time_spent\" , \"lesson_status\" , \"score\" , \"last_accessed_on\" ], \"colToshow\" :{ \"attempt\" : true , \"name\" : true , \"username\" : true , \"usergroup\" : false , \"time_spent\" : true , \"lesson_status\" : true , \"score\" : true , \"last_accessed_on\" : true } } Where: filter_order - Default filter column, can be any key of your $this->columns array filter_order_Dir - Default filter direction, can we ASC or DESC limit - Default limit of the results showHideColumns - Which columns to show in show/hide dropdown. It must be a subset of colToshow(next option) colToshow - By default what columns to display. Key of this data are column names(keys of $this->columns array) and value can be true or false which decides whether it will be displayed by default or not.","title":"Integration guide"},{"location":"tj-reports/tjreports-integration-guide/#installing-the-default-instances","text":"The reporting plugin only offers the code needed for the report. For the report to be usable, it needs to be configured. An extension developer who wishes to create default 'instances' for the plugins can do that by adding the below method in the installation script. In order to use plugin, after installation you need to enable that plugin and to add your plugin detail to table. Below is the code that will add new entry in the table for missing plugins. <?php JModelLegacy :: addIncludePath ( JPATH_ADMINISTRATOR . '/components/com_tjreports/models' ); $model = JModelLegacy :: getInstance ( 'Reports' , 'TjreportsModel' ); $installed = $model -> addTjReportsPlugins (); If you are intalling plugin as a part of a package. You can call above method in postflight of package script. Above method requires some detail from your plugin so you must have below method that will return plugin detail. <?php public function getPluginDetail () { $detail = array ( 'client' => 'com_example' , 'title' => JText :: _ ( 'PLG_TJREPORTS_EXAMPLEREPORT_TITLE' )); return $detail ; } $detail array of above method should have following details - a) client - This is used for grouping of your plugins. b) title - This is the title of your plugin visible to users.","title":"Installing the default instances"},{"location":"tj-reports/tjreports-integration-guide/#linking-to-tj-reports","text":"Just like other infrastructure extensions, you can pass the client context to show reports related to your extension. For instance Shika uses index.php?option=com_tjreports&client=tjlms for reports contextual to Shika LMS. The client is be specified when creating instances. When user passes client parameter in the url at backend, framework also fetches the menus added in the addSubmenu of the component you passed in the client parameter. Below is the default URL for your extension <?php index . php ? option = com_tjreports & client = com_example & task = reports . defaultReport This will bring you to the first plugin of that client type.","title":"Linking to TJ reports"},{"location":"tj-reports/tjreports-integration-guide/#plugin-configuration-options-","text":"One can limit number of columns to show in the Report using plugin configuration. When you edit a plugin in tjreport you can load default params using Load Default Params . This data depends on the details you have mentioned in your plugin __construct. Below is the example JSON Data - { \"filter_order\" : \"name\" , \"filter_order_Dir\" : \"ASC\" , \"limit\" : \"20\" , \"showHideColumns\" :[ \"attempt\" , \"name\" , \"username\" , \"usergroup\" , \"time_spent\" , \"lesson_status\" , \"score\" , \"last_accessed_on\" ], \"colToshow\" :{ \"attempt\" : true , \"name\" : true , \"username\" : true , \"usergroup\" : false , \"time_spent\" : true , \"lesson_status\" : true , \"score\" : true , \"last_accessed_on\" : true } } Where: filter_order - Default filter column, can be any key of your $this->columns array filter_order_Dir - Default filter direction, can we ASC or DESC limit - Default limit of the results showHideColumns - Which columns to show in show/hide dropdown. It must be a subset of colToshow(next option) colToshow - By default what columns to display. Key of this data are column names(keys of $this->columns array) and value can be true or false which decides whether it will be displayed by default or not.","title":"Plugin configuration options -"},{"location":"tj-reports/tjreports-introduction/","text":"TODO","title":"Introduction"},{"location":"tj-reports/tjreports-plugin-add-custom-fields-support/","text":"1. Background \u00b6 TJReport has plugins that let you index the custom fields data created using Joomla's com_fields component. Core TJReports plugins to index data created using com_fields \u00b6 Plugin group Plugin name What does this plugin do content tjreportsfields This plugin adds / updates / deletes columns for * #__tjreports_context tables user tjreportsindexer This plugin adds / updates / deletes user-data for #__tjreports_com_users_user table *In case of if you are using com_fields for com_users context table name will be as #__tjreports_context = #__tjreports_com_users_user 2. Which all com_fields's field types are supported in TJReports? \u00b6 com_field field type tjreport indexer table column type how / what indexer stores values for this what type of filter in tjreports used for this calendar datetime save user entered daterange filter checkboxes varchar (255) save TEXT and not VALUE select / equal match color varchar (7) save user entered - editor text save user entered text / equal match integer int (11) save user entered select / equal match list varchar (255) save TEXT and not VALUE select / equal match imagelist not supported NA NA media not supported NA NA radio varchar (255) save TEXT and not VALUE select / equal match repeatable not supported NA NA sql text save TEXT and not VALUE text / equal match text text save user entered text / equal match textarea text save user entered text / equal match url varchar (250) [based on joomla weblinks table] save user entered text / equal match user varchar (400) [based on joomla user table] store user's name select / equal match usergrouplist varchar (100) [based on joomla usergroups table] store usergorup title select / equal match Database table used for this (indexed data) \u00b6 Every tjreport plugin will rely on a certain table where custom fields data is stored in rows (1 record per row) eg. If context is com_users.user -> table name should be #__tjreports_com_users_user Column which is needed here in this example is record_id int (11) 3. How to add user fields to any tjreports plugin? \u00b6 Below are steps for adding those user fields data columns into an existing report. Eg: For a plugin named mytjreportplugin , open plugin entry file mytjreportplugin.php Steps \u00b6 Setup custom fields columns Setup custom fields filters Step 1: Setup custom fields columns \u00b6 Change constructor from <?php public function __construct ( $config = array ()) { $this -> columns = array ( // Columns setup here ); parent :: __construct ( $config ); } to below <?php public function __construct ( $config = array ()) { // Joomla fields integration // Define custom fields table, alias, and table.column to join on $this -> customFieldsTable = '#__tjreports_user_fields' ; $this -> customFieldsTableAlias = 'tuf' ; $this -> customFieldsQueryJoinOn = 'lt.user_id' ; $this -> columns = array ( // Columns setup here ); parent :: __construct ( $config ); } In step 1, we define customFieldsTable - Custom field's indexed table in which we store duplicated data customFieldsTableAlias - Alias for above table customFieldsQueryJoinOn - Table name and column name on which TJReport will do database query join on (TJReports' model will do query join on the custom fields table's record_id column and with the other DB table which plugin mainly runs the report on.) Step 2: Setup custom fields filters \u00b6 Change code from <?php public function displayFilters () { // Set filters code here $dispFilters = array ( array ( // Set filters code here ), array ( // Set filters code here ) ); return $dispFilters ; } to <?php public function displayFilters () { // Set filters code here $dispFilters = array ( array ( // Set filters code here ), array ( // Set filters code here ) ); // Joomla fields integration // Call parent function to set filters for custom fields if ( method_exists ( get_parent_class ( $this ), 'setCustomFieldsDisplayFilters' )) { parent :: setCustomFieldsDisplayFilters ( $dispFilters ); } return $dispFilters ; } In step 2, we call the parent method setCustomFieldsDisplayFilters() , which sets up filters for columns from custom fields to be displayed on the report. 4. Conclusion \u00b6 That's it, with these 2 simple steps, you will be able to easily add columns, filters, sorting on the columns form the Joomla user's custom fields.","title":"Custom fields (com_fields) support in TJReports plugins"},{"location":"tj-reports/tjreports-plugin-add-custom-fields-support/#1-background","text":"TJReport has plugins that let you index the custom fields data created using Joomla's com_fields component.","title":"1. Background"},{"location":"tj-reports/tjreports-plugin-add-custom-fields-support/#core-tjreports-plugins-to-index-data-created-using-com_fields","text":"Plugin group Plugin name What does this plugin do content tjreportsfields This plugin adds / updates / deletes columns for * #__tjreports_context tables user tjreportsindexer This plugin adds / updates / deletes user-data for #__tjreports_com_users_user table *In case of if you are using com_fields for com_users context table name will be as #__tjreports_context = #__tjreports_com_users_user","title":"Core TJReports plugins to index data created using com_fields"},{"location":"tj-reports/tjreports-plugin-add-custom-fields-support/#2-which-all-com_fieldss-field-types-are-supported-in-tjreports","text":"com_field field type tjreport indexer table column type how / what indexer stores values for this what type of filter in tjreports used for this calendar datetime save user entered daterange filter checkboxes varchar (255) save TEXT and not VALUE select / equal match color varchar (7) save user entered - editor text save user entered text / equal match integer int (11) save user entered select / equal match list varchar (255) save TEXT and not VALUE select / equal match imagelist not supported NA NA media not supported NA NA radio varchar (255) save TEXT and not VALUE select / equal match repeatable not supported NA NA sql text save TEXT and not VALUE text / equal match text text save user entered text / equal match textarea text save user entered text / equal match url varchar (250) [based on joomla weblinks table] save user entered text / equal match user varchar (400) [based on joomla user table] store user's name select / equal match usergrouplist varchar (100) [based on joomla usergroups table] store usergorup title select / equal match","title":"2. Which all com_fields's field types are supported in TJReports?"},{"location":"tj-reports/tjreports-plugin-add-custom-fields-support/#database-table-used-for-this-indexed-data","text":"Every tjreport plugin will rely on a certain table where custom fields data is stored in rows (1 record per row) eg. If context is com_users.user -> table name should be #__tjreports_com_users_user Column which is needed here in this example is record_id int (11)","title":"Database table used for this (indexed data)"},{"location":"tj-reports/tjreports-plugin-add-custom-fields-support/#3-how-to-add-user-fields-to-any-tjreports-plugin","text":"Below are steps for adding those user fields data columns into an existing report. Eg: For a plugin named mytjreportplugin , open plugin entry file mytjreportplugin.php","title":"3. How to add user fields to any tjreports plugin?"},{"location":"tj-reports/tjreports-plugin-add-custom-fields-support/#steps","text":"Setup custom fields columns Setup custom fields filters","title":"Steps"},{"location":"tj-reports/tjreports-plugin-add-custom-fields-support/#step-1-setup-custom-fields-columns","text":"Change constructor from <?php public function __construct ( $config = array ()) { $this -> columns = array ( // Columns setup here ); parent :: __construct ( $config ); } to below <?php public function __construct ( $config = array ()) { // Joomla fields integration // Define custom fields table, alias, and table.column to join on $this -> customFieldsTable = '#__tjreports_user_fields' ; $this -> customFieldsTableAlias = 'tuf' ; $this -> customFieldsQueryJoinOn = 'lt.user_id' ; $this -> columns = array ( // Columns setup here ); parent :: __construct ( $config ); } In step 1, we define customFieldsTable - Custom field's indexed table in which we store duplicated data customFieldsTableAlias - Alias for above table customFieldsQueryJoinOn - Table name and column name on which TJReport will do database query join on (TJReports' model will do query join on the custom fields table's record_id column and with the other DB table which plugin mainly runs the report on.)","title":"Step 1: Setup custom fields columns"},{"location":"tj-reports/tjreports-plugin-add-custom-fields-support/#step-2-setup-custom-fields-filters","text":"Change code from <?php public function displayFilters () { // Set filters code here $dispFilters = array ( array ( // Set filters code here ), array ( // Set filters code here ) ); return $dispFilters ; } to <?php public function displayFilters () { // Set filters code here $dispFilters = array ( array ( // Set filters code here ), array ( // Set filters code here ) ); // Joomla fields integration // Call parent function to set filters for custom fields if ( method_exists ( get_parent_class ( $this ), 'setCustomFieldsDisplayFilters' )) { parent :: setCustomFieldsDisplayFilters ( $dispFilters ); } return $dispFilters ; } In step 2, we call the parent method setCustomFieldsDisplayFilters() , which sets up filters for columns from custom fields to be displayed on the report.","title":"Step 2: Setup custom fields filters"},{"location":"tj-reports/tjreports-plugin-add-custom-fields-support/#4-conclusion","text":"That's it, with these 2 simple steps, you will be able to easily add columns, filters, sorting on the columns form the Joomla user's custom fields.","title":"4. Conclusion"},{"location":"tj-reports/tjreports-reports-with-dynamic-columns/","text":"In this type of a report, there may be one or more fixed columns and one or more columns that change based on a filter value. An example is the plugin for RSForm, where the report shows the list of responses once a form is selected. There are a few of fixed columns like date and submitter, but the rest of the columns are dynamically shown based on the fields in the selected form. Such a report can be easily achieved by setting or overriding the columns property after knowing the results, say in the getItems() method. A limitation for such report is that one cannot set the default config from the administrator as columns are not known. Below is sample code from the RS Form plugin to demonstrate how this can work. <?php public function getItems () { // Fetch Results $rows = $this -> rsmodel -> getSubmissions (); // If no result reset columns if ( empty ( $rows )) { $this -> setState ( 'colToshow' , array ()); return false ; } // Get first Row $firstRow = reset ( $rows ); // Keys of the results will be the columns $columns = array_keys ( $firstRow [ 'SubmissionValues' ]); // Set Column Title foreach ( $columns as $key => & $column ) { $this -> columns [ $column ] = array ( 'title' => $column ); } // Get currently selected columns to show $colToshow = $this -> getState ( 'colToshow' , array ()); if ( ! $colToshow ) { $this -> setState ( 'colToshow' , $columns ); } // Set all functionality on the selected columns $this -> defaultColToShow = $this -> sortableWoQuery = $this -> sortableColumns = $this -> showhideCols = $columns ; return $final ; } We also need to ensure that the Hide/Show columns gets reset when the Form Filter is changed in this case. To do this, you may add the below code in an onChange event where the HTML gets generated inside the displayFilters() method onchange = \"document.getElementById('ul-columns-name').remove(); tjrContentUI.report.submitTJRData();\" Example for how it\u2019s done in the RS Form field <?php $filterHtml = '<div class=\"input-append input-group\">' ; $filterHtml .= JHtml :: _ ( 'select.genericlist' , $formToshow , 'filters[formid]' , 'class=\"filter-input\" size=\"1\" onchange=\"document.getElementById(\\'ul-columns-name\\').remove(); tjrContentUI.report.submitTJRData();\"' , 'value' , 'text' , $searchValue ); $filterHtml .= '</div>' ;","title":"Reports with dyanamic columns"},{"location":"tj-reports/tjreports-write-report-plugin/","text":"The plugin type for TJ Reports plugins is tjreports . Folder structure \u00b6 plugins/tjreports/examplereport/examplereport.xml plugins/tjreports/examplereport/examplereport.php plugins/tjreports/examplereport/language/en-GB/en-GB.plg_tjreports_examplereport.ini Manifest File (examplereport.xml) \u00b6 <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension version= \"3.1\" type= \"plugin\" group= \"tjreports\" method= \"upgrade\" > <name> PLG_TJREPORTS_EXAMPLEREPORT </name> <author> Techjoomla </author> <creationDate> 17th June 2016 </creationDate> <copyright> (C)techjoomla.com </copyright> <license> http://www.gnu.org/copyleft/gpl.html GNU/GPL </license> <authorEmail> contact@techjoomla.com </authorEmail> <authorUrl> www.techjoomla.com </authorUrl> <version> 1.0.0 </version> <description> PLG_TJREPORTS_EXAMPLEREPORT_DESC </description> <files> <filename plugin= \"examplereport\" > examplereport.php </filename> <filename> index.html </filename> <folder> language </folder> </files> </extension> The main report file (examplereport.php) \u00b6 Create a file for plugin same as plugin name - examplereport.php At the top of the file include TJReport Model <?php JLoader :: import ( 'com_tjreports.models.reports' , JPATH_SITE . '/components' ); Extend your plugin from TjreportsModelReports <?php class TjreportsModelExamplereport extends TjreportsModelReports Default ordering column will be assigned to default_order <?php protected $default_order = 'name' ; Default ordering direction will be assigned to default_order_dir <?php protected $default_order_dir = 'ASC' ; All columns details must be added to $columns variable. $columns is an associative array and one of the main entity of report plugin. Key of this Array denotes the report header and Value is an associative array which can have following detail as key value - table_column - is directly linked to table column. This is also used in framework for ordering. If you have complex column like having COUNT than you should leave its value blank title - Title will be displayed on header and on hideshow checkbox disable_sorting - Set to true of this column is not sortable by default all columns are sortable <?php public function __construct ( $config = array ()) { $this -> columns = array ( 'attempt' => array ( 'table_column' => 'lt.attempt' , 'title' => 'COM_TJLMS_TITLE_ATTEMPTS' ), 'usergroup' => array ( 'title' => 'COM_TJLMS_REPORT_USERGROUP' , 'disable_sorting' => true ), ); parent :: __construct ( $config ); } Info Most important method of your plugin is getListQuery . You must have this method and this should return query for your report. To utilize framework where and order by functionality you must call parent getListQuery method and then add your extra clauses in that query object. When you call parent method framework add where clauses as per the filters you have defined in displayFilters method(see below for more detail) <?php $query = parent :: getListQuery (); <?php protected function getListQuery () { $db = $this -> _db ; /* Create query instance by calling parents getListQuery */ $query = parent :: getListQuery (); $query -> from ( $db -> quoteName ( '#__tjlms_lesson_track' , 'lt' )); if ( in_array ( 'usergroup' , $colToshow )) { if ( isset ( $filters [ 'usergroup' ]) && ! empty ( $filters [ 'usergroup' ])) { $subQuery = $db -> getQuery ( true ); $subQuery -> select ( 'ugm.user_id' ); $subQuery -> from ( $db -> quoteName ( '#__user_usergroup_map' ) . ' as ugm' ); $subQuery -> where ( $db -> quoteName ( 'ugm.group_id' ) . ' = ' . ( int ) $filters [ 'usergroup' ]); $query -> where ( 'lt.user_id IN(' . $subQuery . ')' ); } } return $query ; } One can get columns to show using below line. $colToshow is an array of all columns key that use has checked to display for ex - attempt. This should not be called inside constructor. <?php $colToshow = ( array ) $this -> getState ( 'colToshow' ); ``` One can get active filters using below line. $filters is an associative array with key as column name and value as selected value for the filter. This should not be called inside constructor. ``` php <? php $filters = $this -> getState ( 'filters' ); ``` If you want to add any styling you can add your styles in getStyles method ``` php <? php public function getStyles () { return array ( JUri :: root ( true ) . '/css/style.css' ); } This framework also support build in filter functionality. You need to defined on which column you want to perform filteration. Framework currently supports text, dropdown and calendar type filter. There can have max two level of filters, one on Top level and other on Header level. Filters will be defined inside displayFilters method and this method must return associative array and this can have max size of 2. Header level filters will be defined in 0 index. eg. - attempt, name Top level filters will be defined in 1 index. For instance in a single course report if you want to select course and then its report will be populated Each filter will be an associative aray which can have follwoing keys- search_type - it can be text, select, date.range, calendar, html for select type field you need to mention select_options which is an array of JHTML::_('select.option') searchin - if you want framework to add where clause for search criteria you can define type. This is the column name where you want to search. Or you can leave it blank to add your own where clause. For that you need to add where clause in getListQuery method. type - This can be 'equal\u2019,\u2019custom\u2019 otherwise by default it will match for like clause. <?php public function displayFilters () { $dispFilters = array ( array ( 'attempt' => array ( 'search_type' => 'text' , 'type' => 'equal' , 'searchin' => 'lt.attempt' ), 'name' => array ( 'search_type' => 'select' , 'select_options' => $lessonFilter , 'type' => 'equal' , 'searchin' => 'lt.lesson_id' ), ), array ( 'last_accessed_on' => array ( 'search_type' => 'date.range' , 'searchin' => 'last_accessed_on' , 'last_accessed_on_from' => array ( 'attrib' => array ( 'placeholder' => 'FROM (YYYY-MM-DD)' )), 'last_accessed_on_to' => array ( 'attrib' => array ( 'placeholder' => 'TO (YYYY-MM-DD)' )), ) ) ); return $dispFilters ; } If you want to perform any data manipulation before sending it to framework for displaying, you can override below getItems method <?php public function getItems () { $items = parent :: getItems (); foreach ( $items as $item ) { if ( empty ( $item [ 'last_accessed_on' ]) || $item [ 'last_accessed_on' ] == '0000-00-00 00:00:00' ) { $item [ 'last_accessed_on' ] = ' - ' ; } } return $items ; }","title":"Writing a report plugin"},{"location":"tj-reports/tjreports-write-report-plugin/#folder-structure","text":"plugins/tjreports/examplereport/examplereport.xml plugins/tjreports/examplereport/examplereport.php plugins/tjreports/examplereport/language/en-GB/en-GB.plg_tjreports_examplereport.ini","title":"Folder structure"},{"location":"tj-reports/tjreports-write-report-plugin/#manifest-file-examplereportxml","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?> <extension version= \"3.1\" type= \"plugin\" group= \"tjreports\" method= \"upgrade\" > <name> PLG_TJREPORTS_EXAMPLEREPORT </name> <author> Techjoomla </author> <creationDate> 17th June 2016 </creationDate> <copyright> (C)techjoomla.com </copyright> <license> http://www.gnu.org/copyleft/gpl.html GNU/GPL </license> <authorEmail> contact@techjoomla.com </authorEmail> <authorUrl> www.techjoomla.com </authorUrl> <version> 1.0.0 </version> <description> PLG_TJREPORTS_EXAMPLEREPORT_DESC </description> <files> <filename plugin= \"examplereport\" > examplereport.php </filename> <filename> index.html </filename> <folder> language </folder> </files> </extension>","title":"Manifest File (examplereport.xml)"},{"location":"tj-reports/tjreports-write-report-plugin/#the-main-report-file-examplereportphp","text":"Create a file for plugin same as plugin name - examplereport.php At the top of the file include TJReport Model <?php JLoader :: import ( 'com_tjreports.models.reports' , JPATH_SITE . '/components' ); Extend your plugin from TjreportsModelReports <?php class TjreportsModelExamplereport extends TjreportsModelReports Default ordering column will be assigned to default_order <?php protected $default_order = 'name' ; Default ordering direction will be assigned to default_order_dir <?php protected $default_order_dir = 'ASC' ; All columns details must be added to $columns variable. $columns is an associative array and one of the main entity of report plugin. Key of this Array denotes the report header and Value is an associative array which can have following detail as key value - table_column - is directly linked to table column. This is also used in framework for ordering. If you have complex column like having COUNT than you should leave its value blank title - Title will be displayed on header and on hideshow checkbox disable_sorting - Set to true of this column is not sortable by default all columns are sortable <?php public function __construct ( $config = array ()) { $this -> columns = array ( 'attempt' => array ( 'table_column' => 'lt.attempt' , 'title' => 'COM_TJLMS_TITLE_ATTEMPTS' ), 'usergroup' => array ( 'title' => 'COM_TJLMS_REPORT_USERGROUP' , 'disable_sorting' => true ), ); parent :: __construct ( $config ); } Info Most important method of your plugin is getListQuery . You must have this method and this should return query for your report. To utilize framework where and order by functionality you must call parent getListQuery method and then add your extra clauses in that query object. When you call parent method framework add where clauses as per the filters you have defined in displayFilters method(see below for more detail) <?php $query = parent :: getListQuery (); <?php protected function getListQuery () { $db = $this -> _db ; /* Create query instance by calling parents getListQuery */ $query = parent :: getListQuery (); $query -> from ( $db -> quoteName ( '#__tjlms_lesson_track' , 'lt' )); if ( in_array ( 'usergroup' , $colToshow )) { if ( isset ( $filters [ 'usergroup' ]) && ! empty ( $filters [ 'usergroup' ])) { $subQuery = $db -> getQuery ( true ); $subQuery -> select ( 'ugm.user_id' ); $subQuery -> from ( $db -> quoteName ( '#__user_usergroup_map' ) . ' as ugm' ); $subQuery -> where ( $db -> quoteName ( 'ugm.group_id' ) . ' = ' . ( int ) $filters [ 'usergroup' ]); $query -> where ( 'lt.user_id IN(' . $subQuery . ')' ); } } return $query ; } One can get columns to show using below line. $colToshow is an array of all columns key that use has checked to display for ex - attempt. This should not be called inside constructor. <?php $colToshow = ( array ) $this -> getState ( 'colToshow' ); ``` One can get active filters using below line. $filters is an associative array with key as column name and value as selected value for the filter. This should not be called inside constructor. ``` php <? php $filters = $this -> getState ( 'filters' ); ``` If you want to add any styling you can add your styles in getStyles method ``` php <? php public function getStyles () { return array ( JUri :: root ( true ) . '/css/style.css' ); } This framework also support build in filter functionality. You need to defined on which column you want to perform filteration. Framework currently supports text, dropdown and calendar type filter. There can have max two level of filters, one on Top level and other on Header level. Filters will be defined inside displayFilters method and this method must return associative array and this can have max size of 2. Header level filters will be defined in 0 index. eg. - attempt, name Top level filters will be defined in 1 index. For instance in a single course report if you want to select course and then its report will be populated Each filter will be an associative aray which can have follwoing keys- search_type - it can be text, select, date.range, calendar, html for select type field you need to mention select_options which is an array of JHTML::_('select.option') searchin - if you want framework to add where clause for search criteria you can define type. This is the column name where you want to search. Or you can leave it blank to add your own where clause. For that you need to add where clause in getListQuery method. type - This can be 'equal\u2019,\u2019custom\u2019 otherwise by default it will match for like clause. <?php public function displayFilters () { $dispFilters = array ( array ( 'attempt' => array ( 'search_type' => 'text' , 'type' => 'equal' , 'searchin' => 'lt.attempt' ), 'name' => array ( 'search_type' => 'select' , 'select_options' => $lessonFilter , 'type' => 'equal' , 'searchin' => 'lt.lesson_id' ), ), array ( 'last_accessed_on' => array ( 'search_type' => 'date.range' , 'searchin' => 'last_accessed_on' , 'last_accessed_on_from' => array ( 'attrib' => array ( 'placeholder' => 'FROM (YYYY-MM-DD)' )), 'last_accessed_on_to' => array ( 'attrib' => array ( 'placeholder' => 'TO (YYYY-MM-DD)' )), ) ) ); return $dispFilters ; } If you want to perform any data manipulation before sending it to framework for displaying, you can override below getItems method <?php public function getItems () { $items = parent :: getItems (); foreach ( $items as $item ) { if ( empty ( $item [ 'last_accessed_on' ]) || $item [ 'last_accessed_on' ] == '0000-00-00 00:00:00' ) { $item [ 'last_accessed_on' ] = ' - ' ; } } return $items ; }","title":"The main report file (examplereport.php)"},{"location":"tj-ucm/tjucm-features/","text":"Features of UCM \u00b6 1. Save As Draft \u00b6 You can configure your created form (content/UCM Type) to allow users to save the filled form in draft mode i.e the user can partially fill the form and complete as per thair convenience. 2. Autosave \u00b6 This config of UCM Type allows using Ajax-based autosave of form which will autosave the form data in draft mode when a user changes the value of any of the fields on the form. This ensures that the user does not lose the changes done if the form is accidentally closed or any other issue occurs while filling the form. 3. Flexibility to use different layouts \u00b6 You can create different form layouts for different UCM Types and configure the UCM Type to use those layouts. 4. UCM Type and Field permissions \u00b6 You can control the access of UCM Types and Fields in them to show/hide UCM Types and Fields from users of different user groups. Following are the permission which you can use. UCM Type permission \u00b6 Create Item : Allows users in the group to create an item in the given UCM type. View all Items : Allows users in the group to view items created by any user in the given UCM type. Edit all Items : Allows users in the group to edit items created by any user in the given UCM type. Edit all Item State : Allows users in the group to edit state of any item created by any user in the given UCM type. Edit Own Item : Allows users in the group to edit own items in the given UCM type. Delete all Items : Allows users in the group to delete items created by any user in the given UCM type. Field permission \u00b6 Add Field Value : Allows users in the group to add value to the field. View Field Value : Allows users in the group to view the field's value. Edit Field Value : Allows users in the group to edit the field's value. Edit Own Field Value : Allows users in the group to edit the field's value added by the user. 5. List view for items \u00b6 UCM also provides a list view to show the list of submitted items against the UCM Type. 6. Category for UCM Items \u00b6 You can create different categories for a UCM Type and store the items of the UCM Type against them. Eg. Consider a company has created a form to collect data of aspirants to join the company in different departments (Accounts, Testing, Development etc). The form for collecting the data will be same which will collect the same type of data but for different departments. In this case you can create UCM Type categories as \"Accounts\", \"Testing\", \"Development\" and add \"UCM-Category\" field in the form which will help in storing the data of people applying for different departments.","title":"Features"},{"location":"tj-ucm/tjucm-features/#features-of-ucm","text":"","title":"Features of UCM"},{"location":"tj-ucm/tjucm-features/#1-save-as-draft","text":"You can configure your created form (content/UCM Type) to allow users to save the filled form in draft mode i.e the user can partially fill the form and complete as per thair convenience.","title":"1. Save As Draft"},{"location":"tj-ucm/tjucm-features/#2-autosave","text":"This config of UCM Type allows using Ajax-based autosave of form which will autosave the form data in draft mode when a user changes the value of any of the fields on the form. This ensures that the user does not lose the changes done if the form is accidentally closed or any other issue occurs while filling the form.","title":"2. Autosave"},{"location":"tj-ucm/tjucm-features/#3-flexibility-to-use-different-layouts","text":"You can create different form layouts for different UCM Types and configure the UCM Type to use those layouts.","title":"3. Flexibility to use different layouts"},{"location":"tj-ucm/tjucm-features/#4-ucm-type-and-field-permissions","text":"You can control the access of UCM Types and Fields in them to show/hide UCM Types and Fields from users of different user groups. Following are the permission which you can use.","title":"4. UCM Type and Field permissions"},{"location":"tj-ucm/tjucm-features/#ucm-type-permission","text":"Create Item : Allows users in the group to create an item in the given UCM type. View all Items : Allows users in the group to view items created by any user in the given UCM type. Edit all Items : Allows users in the group to edit items created by any user in the given UCM type. Edit all Item State : Allows users in the group to edit state of any item created by any user in the given UCM type. Edit Own Item : Allows users in the group to edit own items in the given UCM type. Delete all Items : Allows users in the group to delete items created by any user in the given UCM type.","title":"UCM Type permission"},{"location":"tj-ucm/tjucm-features/#field-permission","text":"Add Field Value : Allows users in the group to add value to the field. View Field Value : Allows users in the group to view the field's value. Edit Field Value : Allows users in the group to edit the field's value. Edit Own Field Value : Allows users in the group to edit the field's value added by the user.","title":"Field permission"},{"location":"tj-ucm/tjucm-features/#5-list-view-for-items","text":"UCM also provides a list view to show the list of submitted items against the UCM Type.","title":"5. List view for items"},{"location":"tj-ucm/tjucm-features/#6-category-for-ucm-items","text":"You can create different categories for a UCM Type and store the items of the UCM Type against them. Eg. Consider a company has created a form to collect data of aspirants to join the company in different departments (Accounts, Testing, Development etc). The form for collecting the data will be same which will collect the same type of data but for different departments. In this case you can create UCM Type categories as \"Accounts\", \"Testing\", \"Development\" and add \"UCM-Category\" field in the form which will help in storing the data of people applying for different departments.","title":"6. Category for UCM Items"},{"location":"tj-ucm/tjucm-introduction/","text":"Universal Content Manager (UCM) is an application built on top of TJ-Fields. Using UCM you can easily create fully customizable forms (content/UCM Type) in Joomla.","title":"Introduction"},{"location":"tj-vendors/tjvendors-integrating-with-cpg-plugin/","text":"Integrating payment plugins with TJ Vendor will allow each vendor to configure their payment information which will be used for receiving payments. The vendor can add/edit his payment information from the vendor edit page. Supporting vendor specific payment configuration \u00b6 To integrate with any payment plugin for eg: paypal, create a jform xml in the path - paypal/paypal/form/paypal.xml which will have the fields that need to be filled in by the vendor for saving payment information. When any extension implements multi-vendor then the extension will now provide the vendor's payment configuration values to the payment plugin code. Vendor flow \u00b6 When adding or editing a vendor profile, in the payment Information tab, you will see paypal in the list. Once you choose paypal, you will see the fields that were defined in the XML.","title":"Integrating TJ Vendors with CPG Plugin"},{"location":"tj-vendors/tjvendors-integrating-with-cpg-plugin/#supporting-vendor-specific-payment-configuration","text":"To integrate with any payment plugin for eg: paypal, create a jform xml in the path - paypal/paypal/form/paypal.xml which will have the fields that need to be filled in by the vendor for saving payment information. When any extension implements multi-vendor then the extension will now provide the vendor's payment configuration values to the payment plugin code.","title":"Supporting vendor specific payment configuration"},{"location":"tj-vendors/tjvendors-integrating-with-cpg-plugin/#vendor-flow","text":"When adding or editing a vendor profile, in the payment Information tab, you will see paypal in the list. Once you choose paypal, you will see the fields that were defined in the XML.","title":"Vendor flow"},{"location":"tj-vendors/tjvendors-introduction/","text":"TODO","title":"Introduction"},{"location":"tnc-manager/tncmanager-introduction/","text":"Terms & Conditions Manager is used to force users to accept the T&C before they can start using the site, or a part of the site. It is also possible to define multiple T&C that block different contexts. For example, you may want users to accept terms before they start writing blogs on your site. On the same site, you may want users to accept different terms before they can participate in the community. The T&C Manager allows you to do this. Additionally, it also lets you manage versions of each T&C. If a new version of a T&C is created, te user is forced to accept it again before he can access the protected parts.","title":"Introduction"}]}